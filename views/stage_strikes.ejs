<html>

<head>
  <title>UA Smash Stage Strikes</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <style>
    .v-enter-active, .v-leave-active {
      transition: opacity 0.5s ease;
    }

    .v-enter-from, .v-leave-to {
      opacity: 0;
    }

    .slide-fade-enter-active {
      transition: all 0.3s ease-out;
    }

    .slide-fade-leave-active {
      transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);
    }

    .slide-fade-enter-from,
    .slide-fade-leave-to {
      transform: translateX(20px);
      opacity: 0;
    }

    body {
      overflow: hidden;
    }
  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <div class="container-fluid" style="height: 1080px">
      <transition>
        <div
          v-if="showstrike"
          id="uastagelist"
          class="row justify-content-center"
          style="padding-top: 10px"
        >
          <!--style="padding-top: 35px"-->

          <template v-for="item in strikeList" v-bind:key="item">
            <div class="col p-1 mb-2" style="max-width: 225px">
              <div
                class="card text-center text-white rounded shadow"
                style="background-color: rgba(0, 0, 0, 0.8); border: 0px"
              >
                <img
                  class="rounded"
                  v-bind:src="
                    getImageURL(item.stage_name) == null ? '' : getImageURL(item.stage_name)
                  "
                  alt=""
                  style="opacity: 0.8"
                />
                <div class="card-img-overlay">
                  <i
                    v-if="item.choice == 'PICK'"
                    class="bi bi-check-circle"
                    style="font-size: 24pt"
                  ></i>
                  <i
                    v-if="item.choice == 'STRIKE'"
                    class="bi bi-x-circle-fill"
                    style="font-size: 24pt"
                  ></i>
                  <p style="font-size: 12pt; font-weight: bold">
                    {{ item.stage_name }}
                  </p>
                </div>
              </div>
            </div>
          </template>
        </div>
      </transition>
    </div>

  </div>
</body>

<script>
  const { createApp} = Vue

  const socket = io("http://" + window.location.hostname + ":3000", {
    reconnectionDelayMax: 10000,
    autoConnect: false,
  })

  socket.on("striker-push", ({ content, from }) => {
    const data = [];

    for (let i = 0; i < content.length; i++) {
      const strike = {};
      strike.stage_name = content[i]["stage_name"];
      strike.order = content[i]["order"];
      strike.choice = content[i]["choice"];
      strike.playerName = content[i]["playerName"];

      data.push(strike);
    }

    stageStrikesApp.strikeList = data;
    stageStrikesApp.showstrike = true;
    setTimeout(() => (stageStrikesApp.showstrike = false), 5000);
  });

  socket.on("connect_error", (err) => {

  })

  socket.on("connect", () => {

  })

  socket.on("disconnect", () => {

  })

  const stageStrikesApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        socket: socket,
        showstrike: false,
        strikeList: [],
        stage_image_URLs: {},

      }
    },
    mounted() {
      this.getStageImageURLs();

      const urlParams = new URLSearchParams(window.location.search);
      const room = urlParams.get('id')

      if(room != null) {
        this.socket.auth = { room }
        this.socket.connect()
      }
    },
    methods: {
      getImageURL(stage_name) {
        if (this.stage_image_URLs != null) {
          return this.stage_image_URLs[stage_name];
        } else {
          return "";
        }
      },
      async getStageImageURLs() {
        try {

          const response = await fetch('http://' + this.host + this.port + '/stages', {
            method: "get",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if(response.ok) {
            const results = await response.json()
            const data = {};

            for (let i = 0; i < results.length; i++) {
              data[results[i].stage_name] = "/stages/" +results[i].image_url;
            }

            this.stage_image_URLs = data;
          }
        } catch (e) {
          console.log(e)
        }
      },
    },
    computed: {

    },
    components: {

    },
  }).mount('#app')

</script>

</html>
