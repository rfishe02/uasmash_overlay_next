<html>

<head>
  <title>UA Smash Stage Striker</title>

  <!-- Required meta tags -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <link rel="stylesheet" href="/stylesheets/striker.css">

  <style>

  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>
  <script src="https://unpkg.com/primevue/core/core.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/multiselect/multiselect.min.js"></script>

  <script src="https://unpkg.com/primevue@^3/datatable/datatable.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/column/column.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/dataview/dataview.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/dataviewlayoutoptions/dataviewlayoutoptions.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <nav class="navbar navbar-expand-sm navbar-dark">
      <div class="container-fluid" style="margin-top: 75px;">
        <a class="navbar-brand pt-1 pl-2" href="#" disabled>
          <img
            src="/fsmsmashlogo.png"
            alt=""
            height="30"
          />
        </a>

        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNavAltMarkup"
          aria-controls="navbarNavAltMarkup"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
          <div class="navbar-nav me-auto m-2">
            <button
              class="btn btn-sm btn-light"
              type="button"
              style="width: 125px"
              @click="resetActivityAndReloadStages()"
            >
              RESET
            </button>

            <button
              class="btn btn-sm btn-dark"
              type="button"
              style="width: 125px"
              @click="toggleStrikerConfig()"
            >
              SETTINGS
            </button>
          </div>

        </div>
      </div>
    </nav>

    <p-dialog header="Settings" v-model:visible="display" :modal="true" :breakpoints="{ '960px': '75vw', '640px': '90vw' }" :style="{ width: '75vw' }">
      <form class="mt-3">
        <div class="container-fluid">

          <div class="row mb-3">
            <h5>Module URL</h5>
          </div>

          <div class="row mb-3">
            <div class="col-12">
              <div class="p-inputgroup">
                <p-inputtext type="text" :value="getModuleURL"></p-inputtext>
                <p-button icon="pi pi-refresh" @click="regenerateKey()" ></p-button>
              </div>
            </div>
          </div>

          <div class="row mb-3">
            <h5>Choose Stages</h5>
          </div>

          <div class="row row-cols-5 mb-3">

            <div class="col-12 mb-3">
              <p-multiselect
                v-model="starterSelection"
                :options="stageList"
                :filter="true"
                option-label="stageName"
                placeholder="Starter Stages"
                style="width: 100%"
                display="chip"
                :selection-limit="5"
                :reset-filter-on-hide="true"
                scroll-height="225px"
              ></p-multiselect>
            </div>
            <div class="col-12 mb-3">
              <p-multiselect
                v-model="counterpickSelection"
                :options="stageList"
                :filter="true"
                option-label="stageName"
                placeholder="Counterpick Stages"
                style="width: 100%"
                display="chip"
                :selection-limit="5"
                :reset-filter-on-hide="true"
                scroll-height="225px"
              ></p-multiselect>
            </div>

          </div>

          <div class="row mb-3">
            <div class="col-10">
              <p-button label="Save" class="p-button-primary" style="width: 125px" @click="saveStrikerConfig()"></p-button>
              <p-button label="Clear" class="p-button-text" style="width: 125px" @click="clearConfigStageSelections()"></p-button>
            </div>
          </div>

        </div>
      </form>
      <!--
      <template #footer>
          <p-button label="No" icon="pi pi-times" @click="closeBasic" class="p-button-text"></p-button>
          <p-button label="Yes" icon="pi pi-check" @click="closeBasic" autofocus></p-button>
      </template>-->
    </p-dialog>

    <div class="container-md mt-2 mb-2">
      <div class="row row-cols-2 row-cols-sm-4 row-cols-lg-5 rounded" style="overflow-y: auto; overflow-x: hidden">

        <transition-group name="list">
          <template v-for="(item, index) in options" v-bind:key="item">

            <div class="col p-1" v-if="turns != 0 || item.order != 'COUNTERPICK'">
              <div class="card shadow text-center border-secondary " :class="{ 'bg-secondary text-light' : item.choice == Choice.Strike }"
              >

                <card-header :item="item" :url="getImageURL(item.stageName)"></card-header>
                <card-body :item="item"></card-body>

                <div class="card-footer p-2" :class="{ 'border-light': item.choice == Choice.None, 'border-dark' : item.choice == Choice.Strike }">
                  <div class="row justify-content-center" v-if="item.choice == Choice.None">
                    <div class="col">
                      <button class="btn btn-light text-primary" type="button" @click="pickStage(index, true)" style="font-size: 16pt">
                        <i class="bi bi-check-circle"></i>
                      </button>
                    </div>
                    <div class="col">
                      <button class="btn btn-light text-danger" type="button" @click="pickStage(index, false)" style="font-size: 16pt">
                        <i class="bi bi-x-circle-fill"></i>
                      </button>
                    </div>
                  </div>

                  <div class="row justify-content-center" v-if="item.choice == Choice.Strike">
                    <div class="col">
                      <button class="btn btn-dark text-light" type="button" @click="undoChoice(item.stageName)" style="font-size: 16pt">
                        <i class="bi bi-arrow-counterclockwise"></i>
                      </button>
                    </div>
                  </div>

                </div>

              </div>
            </div>

          </template>
        </transition-group>
      </div>

      <template v-for="(record, index) in previousChoices" v-bind:key="record">
        <p style="color: white; margin-top: 15px">Set {{ index + 1 }}</p>
        <div class="row row-cols-2 row-cols-sm-4 row-cols-lg-5 rounded">
          <template v-for="item in record" v-bind:key="item">
            <div class="col p-1">

              <stage-card-small :item="item" :url="getImageURL(item.stageName)">
              </stage-card-small>

            </div>
          </template>
        </div>
      </template>
    </div>

  </div>
</body>

<script type="module">
  import CardHeader from '/javascripts/CardHeader.js'
  import CardBody from '/javascripts/CardBody.js'
  import StageCardSmall from '/javascripts/StageCardSmall.js'

  import Striker from '/javascripts/Striker.mjs'

  import Stage from '/javascripts/Stage.js'
  import KeyManager from '/javascripts/KeyManager.js'

  const { createApp} = Vue

  const socket = io("http://" + window.location.hostname + ":3000", {
    reconnectionDelayMax: 10000,
    autoConnect: false,
  })

  socket.on("connect_error", (err) => {
    console.log("connect error")
  })

  socket.on("connect", () => {

  })

  socket.on("disconnect", () => {
    socket.connect();
  })

  socket.on("close", (reason) => {

  })

  addEventListener('pagehide', (event) => {
    socket.disconnect()
  })

  addEventListener('pageshow', (event) => {

    if(event.persisted) {
      socket.connect()
    }

  })

  const editorApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        stageImageURLs: {},
        stageList: [],
        starterSelection: [],
        counterpickSelection: [],
        strikerModule: "",
        strikerRoom: "",
        display: false,
        previousOptions: [],
        options: [],
        choices: [],
        previousChoices: [],
        turns: 0,
        socket: socket,
        davesRule: true,
        Choice : {
          Pick: 'PICK',
          Strike: 'STRIKE',
          None: ''
        },
      }
    },
    mounted() {
      this.getStageImageURLs()
      this.loadConfigStageList()

      this.resetOptionsAndChoices()
      this.loadStageSelectionsFromDB()

      this.importKeyOrGenerate().then((room) => {
        if(room.length > 0) {
          this.strikerRoom = room
          this.strikerModule = "module/stage_strikes"

          this.socket.connect()
          this.socket.emit("subscribe",room)
        }
      })
    },
    methods: {
      getNumberOfChoices() {
        if (this.choices != null) {
          return this.choices.length;
        } else {
          return 0;
        }
      },
      getImageURL(stageName) {
        if (this.stageImageURLs != null && stageName != null) {
          return this.stageImageURLs[stageName];
        } else {
          // TODO: Return placeholder image.
          return "./pexels-gradienta-6985001.jpeg";
        }
      },
      async getStageImageURLs() {
        try {
          const response = await fetch('http://' + this.host + this.port + '/stages', {
            method: "get",
            headers: {
              "Content-Type": "application/json; charset=UTF-8",
            },
          });

          if(response.ok) {
            const results = await response.json()
            const data = {};

            for (let i = 0; i < results.length; i++) {
              data[results[i].stage_name] = "/stages/" + results[i].image_url;
            }

            this.stageImageURLs = data;
          }
        } catch (e) {
          console.log(e)
        }
      },
      async loadConfigStageList() {
        try {
          const response = await fetch('http://' + this.host + this.port + '/stages', {
            method: "get",
            headers: {
              "Content-Type": "application/json; charset=UTF-8",
            },
          });

          if(response.ok) {
            const results = await response.json()
            const data = [];

            for (let i = 0; i < results.length; i++) {
              const item = { stageName: results[i].stage_name, order: '', choice: '', playerName: ''};
              data.push(item);
            }
            this.stageList = data;
          }
        } catch (e) {
          console.log(e)
        }
      },
      pickStage(index, pick) {
        if (this.options != null && this.options.length > 0) {
          if(this.choices == null) {
            this.choices = []
          }
          if (pick) {
            Striker.pick(this.options,this.choices,index,this.davesRule)

            const stages = this.choices
            this.previousChoices.push(stages)
            this.submitStageStrikes(stages)

            this.choices = []
            this.turns++

          } else {
            Striker.strike(this.options,this.choices,index)
          }
        }
      },
      undoChoice(stageName) {
        if (this.choices != null && this.options != null) {
          if (this.choices.length > 0) {
            Striker.undo(this.options,this.choices,stageName)
          }
        }
      },
      async submitStageStrikes(stages) {
        try {

          if (this.strikerRoom != null) {
            const data = Striker.createStageStrikesForm(stages)

            socket.emit("striker-update", {
              content: data,
              to: this.strikerRoom,
            });
          }

        } catch (e) {
          console.log(e);
        }
      },
      resetOptionsAndChoices() {
        this.options = [];
        this.choices = [];
        this.previousChoices = [];
        this.turns = 0;
      },
      resetActivityAndReloadStages() {
        this.resetOptionsAndChoices();
        this.loadStageSelections();
      },
      toggleStrikerConfig() {
        this.display = !this.display;
      },
      saveStrikerConfig() {
        var stageSelections = [];
        var prevSelections = [];

        try {
          if (this.starterSelection != null && this.counterpickSelection != null) {
            stageSelections = Striker.createOptionsList(this.starterSelection,this.counterpickSelection)
            prevSelections = Striker.createOptionsList(this.starterSelection,this.counterpickSelection)

            this.toggleStrikerConfig();
            this.clearConfigStageSelections();
            this.resetOptionsAndChoices();

            this.saveStageSelectionsToDB(stageSelections)
          }
        } catch(e) {
          console.log(e)
        }

        this.options = stageSelections;
        this.previousOptions = prevSelections;
      },
      clearConfigStageSelections() {
        this.starterSelection = [];
        this.counterpickSelection = [];
      },
      loadStageSelections() {
        if (this.previousOptions != null) {
          if (this.previousOptions.length > 0) {
            const data = [];

            for (let i = 0; i < this.previousOptions.length; i++) {
              data.push(new Stage(this.previousOptions[i].stageName,this.previousOptions[i].order,this.Choice.None,''));
            }

            this.options = data;
          } else {
            this.loadStageSelectionsFromDB();
          }
        } else {
          this.loadStageSelectionsFromDB();
        }
      },
      async saveStageSelectionsToDB(stage_list) {
        try {

          const response = await fetch('http://'+this.host+this.port+'/stage_lists/save_list', {
            method: "post",
            headers: {
              "Content-Type": "application/json; charset=UTF-8",
            },
            body: JSON.stringify({"user_id":<%= user.id %>,"stage_list":JSON.stringify(stage_list)})
          });

          if(response.ok) {
            const results = await response.json()
            console.log(results)
          }

        } catch (e) {
          console.log(e)
        }
      },
      async loadStageSelectionsFromDB() {
        try {

          const response = await fetch('http://'+this.host+this.port+'/stage_lists/load_list', {
            method: "post",
            headers: {
              "Content-Type": "application/json; charset=UTF-8",
            },
            body: JSON.stringify({"user_id":<%= user.id %>})
          });

          if(response.ok) {
            const results = await response.json()

            this.options = []
            this.previousOptions = []

            if(results.length > 0) {
              if(results[0].stage_list != undefined) {

                for(var i = 0; i < results[0].stage_list.length; i++){
                  this.previousOptions.push(results[0].stage_list[i])
                  this.options.push({
                    stageName: results[0].stage_list[i].stageName,
                    order: results[0].stage_list[i].order,
                    choice: results[0].stage_list[i].choice,
                    playerName: results[0].stage_list[i].playerName
                  })
                }
              }
            }
          }

        } catch (e) {
          console.log(e)
        }
      },
      async importKeyOrGenerate() {
        var room = await KeyManager.importRoomKey('http://'+this.host+this.port+'/keys/get_key',<%= user.id %>,"stage strikes")
        if(room.length == 0) {
          room = await KeyManager.generateRoomKey('http://'+this.host+this.port+'/keys/create_key',<%= user.id %>,"stage strikes")
        }

        return room;
      },
      async regenerateKey() {
        var room = room = await KeyManager.generateRoomKey('http://'+this.host+this.port+'/keys/update_key',<%= user.id %>,"stage strikes")

        if(room.length > 0) {
          await this.socket.emit("unsubscribe",this.strikerRoom)

          this.strikerRoom = room
          this.socket.emit("subscribe",this.strikerRoom)
        }
      },
    },
    computed: {
      getModuleURL() {
        if(this.strikerRoom != null && this.strikerModule != null) {
          return this.host +this.port+ "/" + this.strikerModule + "?id=" + this.strikerRoom
        } else {
          return ''
        }
      }
    },
    components: {
      "p-dialog": primevue.dialog,
      "p-button": primevue.button,
      "p-multiselect": primevue.multiselect,
      "p-inputtext": primevue.inputtext,

      "p-datatable": primevue.datatable,
      "p-column": primevue.column,
      "p-dataview": primevue.dataview,
      "p-dataviewlayoutoptions": primevue.dataviewlayoutoptions,

      CardHeader,
      CardBody,
      StageCardSmall
    },
  }).use(primevue.config.default).mount('#app')

</script>

</html>
