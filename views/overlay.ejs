<html>

<head>
  <title>UA Smash Overlay</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link rel="stylesheet" href="/stylesheets/overlay.css">

  <style>
    body {

    }
  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <!--
    <div class="container-fluid" style="height: 1080px">
      <div class="row justify-content-center" style="margin-top: 50px">
        <div class="uaheader uaname col text-truncate shadow rounded-pill-left" style="background-color: rgba(202, 34, 0, 0.9)">
          {{ p1Name }}
        </div>
        <div class="uaheader uascore col shadow">
          {{ p1Score }}
        </div>
        <div class="ualogo col shadow">
          <img src="/fsmsmashlogo.png" style="height: 55px"/>
        </div>
        <div class="uaheader uascore col shadow">
          {{ p2Score }}
        </div>
        <div class="uaheader uaname col text-truncate shadow rounded-pill-right"
          style="text-align: right; background-color: rgba(35, 125, 210, 0.9)">
          {{ p2Name }}
        </div>
      </div>

      <transition>
        <div v-if="eventheader.length > 2" id="header-row"
          class="row justify-content-center">
          <div id="event-header"
            class="col text-truncate uaheader uasubheader shadow">
            {{ eventheader }}
          </div>
        </div>
      </transition>-->

      <div class="container-fluid" style="width: 1920px; height: 1080px;">

        <div class="row justify-content-center">
          <div class="col-2">
            <img src="/fsmsmashlogo.png" style="margin-left: -5px; height: 75px; top: 3%; position: absolute;"/>
          </div>
        </div>

        <transition>
          <div v-if="p1Name.length > 0 || p2Name.length > 0" class="row justify-content-center" style="padding-top: 20px;">
            <team-one :name='p1Name' :score="p1Score" :title="eventRound" :color="'team-one-gradient'"> </team-one>
            <div class="col-2"></div>
            <team-two :name='p2Name' :score="p2Score" :title="bestOf" :color="'team-two-gradient'"> </team-two>
          </div>
        </transition>

        <transition>
          <div v-if="p1Name.length > 0 || p2Name.length > 0" class="row justify-content-center">
            <central-header :round="eventRound" :bestof="bestOf"> </central-header>
          </div>
        </transition>

        <transition>
          <div v-if="bracketType.length > 0" class="row" style="position: absolute; left: 10px; top: 10%; min-width: 200px;">
            <left-header :title="bracketType"> </left-header>
          </div>
        </transition>

        <!--
        <div class="row justify-content-between fixed-bottom" style="">
          <div class="col" style="max-width: 350px; margin-left: 25px; margin-bottom: 15px;">
            <social-media :members="p1.members"> </social-media>
          </div>
          <div class="col" style=" max-width: 350px; margin-right: 25px; margin-bottom: 15px;">
            <social-media :members="p2.members"> </social-media>
          </div>
        </div>-->

        <div class="row justify-content-between fixed-bottom">
          <div class="col shadow" style="height: 200px;
          border :solid;
          border-color: white;
          border-radius: .5rem .5rem .5rem .5rem;
          border-width: 7px;
          max-width: 350px;
          margin-left: 25px;
          margin-bottom: 15px;">
          </div>

          <div class="col shadow" style="height: 200px;
          border :solid;
          border-color: white;
          border-radius: .5rem .5rem .5rem .5rem;
          border-width: 7px;
          max-width: 350px;
          margin-right: 25px;
          margin-bottom: 15px;">
          </div>
        </div>



      </div>

    </div>

  </div>
</body>

<script type="module">
  import TeamOne from '/javascripts/TeamOne.js'
  import TeamTwo from '/javascripts/TeamTwo.js'
  import LeftHeader from '/javascripts/LeftHeader.js'
  import CentralHeader from '/javascripts/CentralHeader.js'
  import SocialMedia from '/javascripts/SocialMedia.js'

  const { createApp} = Vue

  const socket = io("http://" + window.location.hostname + ":3000", {
    reconnectionDelayMax: 10000,
    autoConnect: false,
  })

  socket.on("overlay-push", ({ content, from }) => {
    overlayApp.p1 = content["teamOne"]
    overlayApp.p2 = content["teamTwo"]

    overlayApp.p1Name = overlayApp.p1 == null ? "" : overlayApp.p1.name
    overlayApp.p1Score = overlayApp.p1 == null ? "" : overlayApp.p1.score

    overlayApp.p2Name = overlayApp.p2 == null ? "" : overlayApp.p2.name
    overlayApp.p2Score = overlayApp.p2 == null ? "" : overlayApp.p2.score

    overlayApp.bracketType = content["bracketType"].toUpperCase()
    overlayApp.eventRound = content["eventRound"].toUpperCase()
    overlayApp.bestOf = content["bestOf"].toUpperCase()
    overlayApp.typedHeader = content["typedHeader"].toUpperCase()


    // TODO: Come up with a way to show multiple social accounts, until then truncate teams with multiple members.

    if(overlayApp.p1.members != null) {
      if(overlayApp.p1.members.length > 1) {
        overlayApp.p1.members = []
      }
    }

    if(overlayApp.p2.members != null) {
      if(overlayApp.p2.members.length > 1) {
        overlayApp.p2.members = []
      }
    }


    sessionStorage.setItem("teamOne",JSON.stringify(content["teamOne"]))
    sessionStorage.setItem("teamTwo",JSON.stringify(content["teamTwo"]))

    // TODO: Remove typed header.

    sessionStorage.setItem("bracketType",overlayApp.bracketType)
    sessionStorage.setItem("eventRound",overlayApp.eventRound)
    sessionStorage.setItem("bestOf",overlayApp.bestOf)
    sessionStorage.setItem("typedHeader",overlayApp.typedHeader)

  })

  const overlayApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        p1: {},
        p2: {},
        p1Name: "",
        p2Name: "",
        p1Score: "",
        p2Score: "",
        bracketType: "",
        eventRound:"",
        bestOf:"",
        typedHeader:"",
        socket: socket
      }
    },
    mounted() {
      const urlParams = new URLSearchParams(window.location.search)
      const room = urlParams.get('id')

      if(room != null) {
        this.socket.connect()
        this.socket.emit("subscribe",room)
      }

      const teamOne = sessionStorage.getItem("teamOne")
      const teamTwo = sessionStorage.getItem("teamTwo")

      const bracketType = sessionStorage.getItem("bracketType")
      const eventRound = sessionStorage.getItem("eventRound")
      const bestOf = sessionStorage.getItem("bestOf")
      const typedHeader = sessionStorage.getItem("typedHeader")

      if(teamOne != undefined) {
        this.p1 = JSON.parse(teamOne)
        this.p1Name = this.p1.name
        this.p1Score = this.p1.score
      }
      if(teamTwo != undefined) {
        this.p2 = JSON.parse(teamTwo)
        this.p2Name = this.p2.name
        this.p2Score = this.p2.score
      }

      if(bracketType != undefined) {
        this.bracketType = bracketType
      }
      if(eventRound != undefined) {
        this.eventRound = eventRound
      }
      if(bestOf != undefined) {
        this.bestOf = bestOf
      }
      if(typedHeader != undefined) {
        this.typedHeader = typedHeader
      }

      console.log(this.p1)
      console.log(this.p2)

    },
    methods : {

    },
    components: {
      TeamOne,
      TeamTwo,
      LeftHeader,
      CentralHeader,
      SocialMedia,
    }
  }).mount('#app')

</script>

</html>
