<html>

<head>
  <title>UA Smash Overlay Editor</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <link rel="stylesheet" href="/stylesheets/editor.css">

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="https://unpkg.com/primevue/core/core.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/radiobutton/radiobutton.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/checkbox/checkbox.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <nav-bar :icon-url="navLogoUrl" :links="navLinks"></nav-bar>

    <div class="container" style="padding-bottom: 15px; padding-top: 15px;">

      <div class="row justify-content-around mb-2">
        
        <div class="col-5 border rounded" style="padding: 15px; background-color: white;">

          <div class="row mb-3">
            <h3>Configuration Settings</h3>
          </div>

          <div class="row">
            <div class="col">
              <h6>Start.gg API Key</h6>
            </div>
          </div>

          <div class="row mb-4">
            <div class="col">
              <div class="p-inputgroup">
                <p-inputtext v-model="apiKey" @change="saveAPIKey"></p-inputtext>
              </div>
              <div class="field-checkbox">
                <p-checkbox inputId="binary" v-model="polling" :binary="true"></p-checkbox>
                <label for="binary">&nbsp; Automatic API polling</label>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col">
              <h6>"Best Of 5" Starting Point</h6>
            </div>
          </div>

          <div class="row mb-4" v-if="apiKey.length > 0">
            <div class="col">
              <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                <p-radiobutton :inputId="'winner' + option" name="winnerStart" :value="option" v-model="selectedWinnerBestOfStart"></p-radiobutton>
                <label :for="'winner' + option">&nbsp;<i>Winners {{option}}</i></label>
              </div>
            </div>

            <div class="col">
              <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                <p-radiobutton :inputId="'loser' + option" name="loserStart" :value="option" v-model="selectedLoserBestOfStart"></p-radiobutton>
                <label :for="'loser' + option">&nbsp;<i>Losers {{option}}</i></label>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col">
              <h6>Tournament</h6>
            </div>
          </div>

          <div class="row mb-4" v-if="apiKey.length > 0">
            <div class="col">
              <p-dropdown
                v-model="tournamentSelection"
                :options="tournamentList"
                option-label="name"
                placeholder="Select a Tournament"></p-dropdown>
            </div>
          </div>

          <div class="row">
            <div class="col">
              <p-button
              label="Submit"
              class="p-button-outlined"
              style="width: 125px"
              @click="submitSettings"></p-button>
            </div>
          </div>

        </div>

        <div class="col-6 border rounded" style="padding: 15px; background-color: white;">

          <div class="row mb-3">
            <h3>Browser Source URLs</h3>
          </div>

          <template v-for="(url, urlIndex) in overlayURLs">
            <template v-for="type in url.types">
              <div class="row mb-3">
                <div class="col-12">
                  <label :for="'url'+urlIndex"><h6>{{url.name}}</h6></label>
                  <div :id="'url'+urlIndex" class="p-inputgroup">
                    <p-inputtext type="text" :value="getOverlayURL(url.path,{'type':type,'key':url.room,'startgg_key':apiKey})"> </p-inputtext>
                    <p-button icon="pi pi-refresh" class="p-button-text" @click="regenerateKey(url.path, url.name)" ></p-button>
                  </div>
                </div>
              </div>
            </template>
          </template>

        </div>

      </div>

    </div>

  </div>
</body>

<script type="module">
  import StartGGAPI from '/javascripts/StartGGAPI.js'
  import NavBar from '/javascripts/NavBar.js'
  import OverlayDataManager from '/javascripts/OverlayDataManager.js'
  const { createApp} = Vue
  const { FilterMatchMode, FilterOperator } = primevue.api;

  const dashboardApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        navLogoUrl: '/fsmsmashlogo.png',
        navLinks:[
          {url: '/editor', name: 'Editor'},
          {url: '/striker', name: 'Stage Striker'},
        ],
        playerOverlayRoom: "",
        strikerOverlayRoom: "",
        overlayList: [
          {types: [0], path: "players", name: "Player Overlay"},
          {types: [0], path: "stage_strikes", name: "Stage Strikes Overlay"},
          {types: [0], path: "waiting", name: "Waiting Screen"},
          {types: [0], path: "upcoming", name: "Upcoming Matches"},
        ],
        overlayURLs: [],
        apiKey: '',
        tournamentList: [],
        tournamentSelection: {slug: '',},
        selectedWinnerBestOfStart: 'Quarter-Final',
        selectedLoserBestOfStart: 'Quarter-Final',
        finalsStartOptions : [
          'Round 1',
          'Round 2',
          'Round 3',
          'Round 4',
          'Round 5',
          'Quarter-Final',
          'Semi-Final',
          'Final',
          'Grand Final',
        ],
        polling: true,
      }
    },
    mounted() {

      this.overlayList.forEach(item => {
        OverlayDataManager.importOverlayDataOrGenerate('http://'+this.host+this.port,<%= user.id %>,item.path,item.name).then((data) => {
          console.log(data)
          const urlItem = {types: item.types, path:item.path, name:item.name, room:data.key_value}
          this.overlayURLs.push(urlItem)
        })
      })

      const key = localStorage.getItem('apiKey')

      if(key != null) {
        this.apiKey = key
        this.loadTournamentList()
      }

    },
    methods: {
      getOverlayURL(overlay_path,params) {

        if(overlay_path != null && params != null) {
          return this.host + this.port+ "/overlay/" + overlay_path + "?" + new URLSearchParams(params)
        } else {
          return ''
        }

      },
      async regenerateKey(overlay_path,overlay_name) {
        OverlayDataManager.regenerateOverlayKey('http://'+this.host+this.port,<%= user.id %>,overlay_path,overlay_name).then((data) => {
          const url = this.overlayURLs.find(x => x.path == data.overlay_path)
          if(url != null){
            url.path = data.overlay_path
            url.name = data.overlay_name
            url.room = data.key_value
          }
        })
      },
      saveAPIKey() {
        localStorage.setItem('apiKey',this.apiKey)
        this.loadTournamentList()
      },
      async loadTournamentList() {
        try {

          const results = await StartGGAPI.queryTournaments(this.apiKey)
          this.tournamentList = results

        } catch (e) {
          console.log(e)
        }
      },
      submitSettings() {
        
        const settings = {
          poll:this.polling,
          winnerBestOfStart: this.selectedWinnerBestOfStart,
          loserBestOfStart: this.selectedLoserBestOfStart,
          slug: this.tournamentSelection.slug,
        }

        OverlayDataManager.saveOverlaySettings('http://'+this.host+this.port,<%= user.id %>,settings)

      },
    },
    computed: {
      
    },
    components: {
      "p-button": primevue.button,
      "p-radiobutton": primevue.radiobutton,
      "p-inputtext": primevue.inputtext,
      "p-dropdown": primevue.dropdown,
      "p-checkbox": primevue.checkbox,
      NavBar,
    },
  }).use(primevue.config.default).mount('#app')

</script>

</html>
