<html>

<head>
  <title>UA Smash Overlay Editor</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <link rel="stylesheet" href="/stylesheets/editor.css">

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="https://unpkg.com/primevue/core/core.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/datatable/datatable.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/column/column.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/selectbutton/selectbutton.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/radiobutton/radiobutton.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/checkbox/checkbox.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/togglebutton/togglebutton.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <nav class="navbar navbar-expand-md navbar-dark bg-secondary">
      <div class="container-fluid" style="">
        <a class="navbar-brand pt-1 pl-2" href="#" disabled>
          <img src="/fsmsmashlogo.png" alt="" height="30" />
        </a>

        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNavAltMarkup"
          aria-controls="navbarNavAltMarkup"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">

          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a href="/striker" style="color: white;">Stage Striker</a>
            </li>
          </ul>

          <div class="navbar-nav me-auto m-2"></div>

          <!-- TODO: Log out feature. -->
          <!--<button class="btn btn-light" type="button" @click="logOut">Log Out</button>-->

        </div>
      </div>
    </nav>

    <div class="container-fluid" style="padding-bottom: 25px; padding-top: 15px">

      <div class="row">
        <div class="col-12 col-lg-6 pb-3" style="height: 500px">
          <p-datatable
            :value="setList"
            v-model:selection="setSelection"
            selection-mode="single"
            class="p-datatable-sm border"
            data-key="id"
            :scrollable="true"
            scroll-height="flex"
            filter-display="menu"
            v-model:filters="filters2"
            :loading="loading2"
            responsive-layout="scroll"
            :global-filter-fields="['phaseName', 'fullRoundText', 'versusBanner']">
            <template #header>

              <div class="row mb-2">
                <div class="col">
                  <div class="p-inputgroup">
                    <p-dropdown
                      v-model="tournamentSelection"
                      :options="tournamentList"
                      option-label="name"
                      placeholder="Select a Tournament"
                      @change="importPlayerList()"
                    ></p-dropdown>
                    <p-dropdown
                      v-model="eventSelection"
                      :options="getEventList(tournamentSelection)"
                      option-label="name"
                      placeholder="Select an Event"
                    ></p-dropdown>
                    <p-button icon="pi pi-refresh" @click="importSetList()" ></p-button>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-3 me-3">
                  <span class="p-input-icon-left">
                    <i class="pi pi-search"></i>
                    <p-inputtext v-model="filters2['global'].value" placeholder="Keyword Search"></p-inputtext>
                  </span>
                </div>
              </div>

            </template>

            <template #empty> No sets to show. </template>
            <template #loading> Loading set data. Please wait. </template>

            <p-column header="Bracket & Round" filter-field="bracketAndRound">
              <template #body="{ data }">
                <p v-if="data.state == 3" style="margin: 0; color: #D3D3D3;"> {{ data.bracketAndRound }} </p>
                <p v-if="data.state == 1 || data.state == 2" style="margin: 0; color: black;"> {{ data.bracketAndRound }} </p>
              </template>
              <template #filter="{ filterModel, filterCallback }">
                <p-inputtext
                  type="text"
                  v-model="filterModel.value"
                  @input="filterCallback()"
                  class="p-column-filter"
                  placeholder="Search Round"
                ></p-inputtext>
              </template>
            </p-column>

            <p-column header="Team One" filter-field="teamOne.name">
              <template #body="{ data }">
                <p v-if="data.state == 3" style="margin: 0; color: #D3D3D3">{{data.teamOne.name}}</p>
                <p v-if="data.state == 1 || data.state == 2" style="margin: 0; color: black;">{{data.teamOne.name}}</p>
              </template>
              <template #filter="{ filterModel, filterCallback }">
                <p-inputtext
                  type="text"
                  v-model="filterModel.value"
                  @input="filterCallback()"
                  class="p-column-filter"
                  placeholder="Search Match"
                ></p-inputtext>
              </template>
            </p-column>

            <p-column style="max-width: 5rem">
              <template #body="{ data }">
                  <template v-if="data.state == 3">
                    <p-button @click="onSetSelection(data, 'Player 1 Left')" icon="bi bi-arrow-left-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'No Order')" icon="bi bi-question-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'Player 1 Right')" icon="bi bi-arrow-right-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                  </template>
                  <template v-if="data.state == 1 || data.state == 2">
                    <p-button @click="onSetSelection(data, 'Player 1 Left')" icon="bi bi-arrow-left-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'No Order')" icon="bi bi-question-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'Player 1 Right')" icon="bi bi-arrow-right-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                  </template>
              </template>
            </p-column>

            <p-column header="Team Two" filter-field="teamTwo.name">
              <template #body="{ data }">
                <p v-if="data.state == 3" style="margin: 0; color: #D3D3D3">{{data.teamTwo.name}}</p>
                <p v-if="data.state == 1 || data.state == 2" style="margin: 0; color: black;">{{data.teamTwo.name}}</p>
              </template>
              <template #filter="{ filterModel, filterCallback }">
                <p-inputtext
                  type="text"
                  v-model="filterModel.value"
                  @input="filterCallback()"
                  class="p-column-filter"
                  placeholder="Search Match"
                ></p-inputtext>
              </template>
            </p-column>

            <p-column style="max-width: 5rem">
              <template #body="{ data }">
                  <template v-if="data.state == 3">
                    <p-button @click="onSetSelection(data, 'Player 1 Right')" icon="bi bi-arrow-left-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'No Order')" icon="bi bi-question-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'Player 1 Left')" icon="bi bi-arrow-right-circle" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                  </template>
                  <template v-if="data.state == 1 || data.state == 2">
                    <p-button @click="onSetSelection(data, 'Player 1 Right')" icon="bi bi-arrow-left-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'No Order')" icon="bi bi-question-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                    <p-button @click="onSetSelection(data, 'Player 1 Left')" icon="bi bi-arrow-right-circle-fill" class="p-button-secondary p-button-text" style="font-size: 14pt;"></p-button>
                  </template>
              </template>
            </p-column>

          </p-datatable>
        </div>


        <div class="col-12 col-lg-6">

          <form class="border" id="overlay-edit" style="margin-bottom: 15px">
            <div class="row" style="margin-bottom: 25px;">
              <h5>Player & Banner Update</h5>
            </div>

            <div class="row mb-2">
              <div class="field col" >
                <span class="p-float-label">
                  <p-autocomplete
                    v-model="teamOne"
                    :suggestions="filteredPlayers"
                    @complete="filterPlayers($event)"
                    field="name"
                    :dropdown="false"
                  ></p-autocomplete>
                  <label for="autocomplete">Left Team</label>
                </span>
              </div>

              <div class="col">
                <span class="p-float-label">
                  <p-autocomplete
                    v-model="teamTwo"
                    :suggestions="filteredPlayers"
                    @complete="filterPlayers($event)"
                    field="name"
                    :dropdown="false"
                  ></p-autocomplete>
                  <label for="autocomplete">Right Team</label>
                </span>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col mb-2">
                <p-selectbutton
                  v-model="p1Score"
                  :options="scoreOptions"
                  option-label="name"
                  :unselectable="false"
                ></p-selectbutton>
              </div>

              <div class="col">
                <p-selectbutton
                  v-model="p2Score"
                  :options="scoreOptions"
                  option-label="name"
                  :unselectable="false"
                ></p-selectbutton>
              </div>
            </div>

            <div class="row mb-3">
              <h5>Event Banner</h5>
            </div>

            <div class="row mb-2">
              <div class="col-6 col-md-4 mb-2">
                <p-autocomplete
                  v-model="bracketType"
                  :suggestions="filteredBrackets"
                  @complete="filterBrackets($event)"
                  :dropdown="false"
                  placeholder="Bracket Type"
                ></p-autocomplete>
              </div>
              <div class="col-6 col-md-4 mb-2">
                <p-autocomplete
                  v-model="eventRound"
                  :suggestions="filteredRounds"
                  @complete="filterRounds($event)"
                  :dropdown="false"
                  placeholder="Round"
                ></p-autocomplete>
              </div>

              <div class="col-6 col-md-4 mb-2">
                <p-selectbutton :unselectable="false" v-model="bestOf" :options="matchList" aria-labelledby="">
                </p-selectbutton>
                <!--
                <p-dropdown
                  class="w-100"
                  v-model="bestOf"
                  :options="matchList"
                  placeholder="Best of"
                  :editable="true"
                ></p-dropdown>-->
              </div>

            </div>

            <div class="row justify-content-between pt-3">
              <div class="col-8 mb-2">
                <p-button
                  label="Publish"
                  class="p-button-outlined"
                  style="width: 125px; margin-right: 10px"
                  @click="submitOverlayForm"
                ></p-button>
                <p-button
                  label="Clear"
                  class="p-button-text"
                  style="width: 125px"
                  @click="clearOverlayForm"
                ></p-button>
              </div>
            </div>
          </form>

          <form class="border" >
            <div class="row mb-3">
              <h5>Score Update</h5>
            </div>

            <div class = "row mb-3">
              <div class="col">
                <p-selectbutton v-model="p1ScoreIncrement" :unselectable="false" option-label="name" :options="scoreOptions" aria-labelledby=""></p-selectbutton>
              </div>
              <div class="col">
                <p-selectbutton v-model="p2ScoreIncrement" :unselectable="false" option-label="name" :options="scoreOptions" aria-labelledby=""></p-selectbutton>
              </div>
            </div>

            <div class="row pt-3">
              <div class="col">
                <p-button
                  label="Update"
                  class="p-button-outlined"
                  style="width: 125px; margin-right: 10px"
                  @click="submitScoreForm"
                ></p-button>
                <p-button
                  label="Reset"
                  class="p-button-text"
                  style="width: 125px"
                  @click="clearScoreForm"
                ></p-button>
              </div>
            </div>
          </form>

          <div class="row mb-2" style="padding-left: 20px;">
            <h5>Module URL</h5>
          </div>

          <div class="row" style="padding-left: 20px;">

            <div class="col-12 mb-3">
              <label for="module0nonpoll"><h6>Non-polling (Editor Entry)</h6></label>
              <div id="module0nonpoll" class="p-inputgroup">
                <p-inputtext type="text" :value="getModuleURL(0,'false')"> </p-inputtext>
                <p-button icon="pi pi-refresh" class="p-button-text" @click="regenerateKey()" ></p-button>
              </div>
            </div>

            <div class="col-12 mb-2">
              <div class="row">
                <label for="module1poll"><h6>Polling (Automatic)</h6></label>
              </div>

              <div class="row mb-2">
                <div class="col">
                  <label>Winners Bracket "Best Of 5" Starting Point</label>
                  <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                    <p-radiobutton :inputId="winner + option" name="winnerStart" :value="option" v-model="selectedWinnerBestOfStart"></p-radiobutton>
                    <label :for="winner + option"> {{option}}</label>
                  </div>
                </div>

                <div class="col">
                  <label>Losers Bracket "Best Of 5" Starting Point</label>
                  <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                    <p-radiobutton :inputId="loser + option" name="loserStart" :value="option" v-model="selectedLoserBestOfStart"></p-radiobutton>
                    <label :for="loser + option">{{option}}</label>
                  </div>
                </div>
              </div>

              <div class="row">
                <div id="module1poll" class="p-inputgroup">
                  <p-inputtext type="text" :value="getModuleURL(0,'true')"> </p-inputtext>
                </div>
              </div>

            </div>
            <!--
            <div class="col-12">
              <div class="p-inputgroup">
                <p-inputtext type="text" :value="getModuleURL(1)"> </p-inputtext>
                <p-button icon="pi pi-refresh" class="p-button-text" @click="regenerateKey()" ></p-button>
              </div>
            </div>-->
          </div>

        </div>

      </div>

      <!-- TODO: Rebuild preview header -->

    </div>

  </div>
</body>

<script type="module">
  import KeyManager from '/javascripts/KeyManager.js'
  import Editor from '/javascripts/Editor.mjs'

  const { createApp} = Vue
  const { FilterMatchMode, FilterOperator } = primevue.api;

  const socket = io("http://" + window.location.hostname + ":3000", {
    reconnectionDelayMax: 10000,
    autoConnect: false,
  })

  socket.on("connect_error", (err) => {
    console.log("connect error")
  })

  socket.on("connect", () => {

  })

  socket.on("disconnect", () => {
    socket.connect();
  })

  socket.on("close", (reason) => {

  })

  addEventListener('pagehide', (event) => {
    socket.disconnect()
  })

  addEventListener('pageshow', (event) => {
    if(event.persisted) {
      socket.connect()
    }
  })

  const editorApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        tournamentList: [],
        setList: [],
        playerList: [],
        filteredPlayers: [],
        filteredBrackets: [],
        filteredRounds: [],
        tournamentSelection: [],
        eventSelection: [],
        setSelection: [],
        seatingChoice: false,
        teamOne: {name: ''},
        teamTwo: {name: ''},
        p1Score: {name: '-', value: ''},
        p2Score: {name: '-', value: ''},
        p1ScoreIncrement: {name: '-', value: ''},
        p2ScoreIncrement: {name: '-', value: ''},
        bracketType: "",
        eventRound: "",
        bestOf: "Best of 3",
        loading2: false,
        filters2: {
          global: { value: null, matchMode: FilterMatchMode.CONTAINS },
          phaseName: { value: null, matchMode: FilterMatchMode.CONTAINS },
          fullRoundText: { value: null, matchMode: FilterMatchMode.CONTAINS },
          versusBanner: { value: null, matchMode: FilterMatchMode.CONTAINS },
        },
        overlayRoom: "",
        overlayModule: "",
        socket: socket,
        selectedWinnerBestOfStart: 'Quarter-Final',
        selectedLoserBestOfStart: 'Quarter-Final',
        finalsStartOptions : [
          'Quarter-Final',
          'Semi-Final',
          'Final',
          'Grand Final',
        ],
        scoreOptions: [
          { name: "-", value: "" },
          { name: "0", value: "0" },
          { name: "1", value: "1" },
          { name: "2", value: "2" },
          { name: "3", value: "3" },
          { name: "4", value: "4" },
        ],
        bracketList: [
          "Friendlies",
          "Pools",
          "Bracket",
          "Top 32",
          "Top 8",
        ],
        roundList: [
          "Round 1",
          "Round 2",
          "Round 3",
          "Round 4",
          "Round 5",
          "Winners Round 1",
          "Winners Round 2",
          "Winners Round 3",
          "Winners Round 4",
          "Winners Round 5",
          "Winners Quarter-Final",
          "Winners Semi-Final",
          "Winners Final",
          "Losers Round 1",
          "Losers Round 2",
          "Losers Round 3",
          "Losers Round 4",
          "Losers Round 5",
          "Losers Quarter-Final",
          "Losers Semi-Final",
          "Losers Final",
          "Grand Final",
          "Grand Final Reset",
        ],
        matchList: [
          "Best of 3",
          "Best of 5",
        ],
      }
    },
    mounted() {
      this.setInitialState()

      this.importKeyOrGenerate().then((room) => {
        if(room.length > 0) {
          this.overlayRoom = room
          this.overlayModule = "module/overlay"

          this.socket.connect()
          this.socket.emit("subscribe",room)
        }
      })
    },
    methods: {
      async setInitialState() {

        try {
          const response = await fetch('http://'+this.host+this.port +'/smashgg/query_tournaments', {
            method: "get",
            headers: {
              "Content-Type": "application/json; charset=UTF-8",
            },
          });

          if(response.ok) {
            const results = await response.json()
            this.tournamentList = results
          }
        } catch (e) {
          console.log(e)
        }

      },
      getEventList(input) {
        if (input == null) {
          return []
        } else if (input.events != null) {
          return input.events
        } else {
          return []
        }
      },
      onSetSelection(data, seatingChoice) {
        this.setSelection = data

        if (this.setSelection != null) {
          this.teamOne = Editor.getTeamOneObject(data,this.playerList,seatingChoice)
          this.teamTwo = Editor.getTeamTwoObject(data,this.playerList,seatingChoice)

          this.p1Score = { name: "-", value: "" }
          this.p2Score = { name: "-", value: "" }

          this.bracketType = this.setSelection.phaseName
          this.eventRound = this.setSelection.fullRoundText
          this.bestOf = this.setSelection.fullRoundText.indexOf("Final") > 0 ? 'Best of 5' : 'Best of 3'
        }
      },
      async importSetList() {
        if (this.eventSelection != null) {
          //this.clearOverlayForm()

          try {
            const response = await fetch('http://'+this.host+this.port +'/smashgg/query_sets?' + new URLSearchParams({"event_id":this.eventSelection.id}), {
              method: "get",
              headers: {
                "Content-Type": "application/json; charset=UTF-8",
              },
            });

            if(response.ok) {
              const results = await response.json()
              this.setList = results
            }
          } catch (e) {
            console.log(e)
          }

        }
      },
      async importPlayerList() {
        if (this.tournamentSelection != null) {
          if (this.tournamentSelection.id != null) {

            const playerDictionary = {}

            try {
              const response = await fetch('http://'+this.host+this.port+'/smashgg/query_players?' + new URLSearchParams({"tourney_id":this.tournamentSelection.id}), {
                method: "get",
                headers: {
                  "Content-Type": "application/json; charset=UTF-8",
                },
              });

              if(response.ok) {
                const results = await response.json()

                for(var i = 0; i < results.length; i++) {
                  playerDictionary[results[i].name] = results[i]
                }

                this.playerList = playerDictionary
              }
            } catch (e) {
              console.log(e)
            }

          }
        }
      },
      filterPlayers(event) {
        const items = this.playerList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (const item in items) {
            if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {
              _filteredItems.push(items[item])
            }
          }

          this.filteredPlayers = _filteredItems
        }
      },
      filterBrackets(event) {
        const items = this.bracketList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (let i = 0; i < items.length; i++) {
            const item = items[i]
            if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {
              _filteredItems.push(item)
            }
          }

          this.filteredBrackets = _filteredItems
        }
      },
      filterRounds(event) {
        const items = this.roundList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (let i = 0; i < items.length; i++) {
            const item = items[i]
            if (item.toLowerCase().indexOf(query.toLowerCase()) >= 0) {
              _filteredItems.push(item)
            }
          }

          this.filteredRounds = _filteredItems
        }
      },
      async importKeyOrGenerate() {
        var room = await KeyManager.importRoomKey('http://'+this.host+this.port+'/keys/get_key',<%= user.id %>,"overlay")
        if(room.length == 0) {
          room = await KeyManager.generateRoomKey('http://'+this.host+this.port+'/keys/create_key',<%= user.id %>,"overlay")
        }

        return room;
      },
      async regenerateKey() {
        var room = room = await KeyManager.generateRoomKey('http://'+this.host+this.port+'/keys/update_key',<%= user.id %>,"overlay")

        if(room.length > 0) {
          await this.socket.emit("unsubscribe",this.overlayRoom)

          this.overlayRoom = room
          this.socket.emit("subscribe",this.overlayRoom)
        }
      },
      async submitOverlayForm() {
        try {
          if (this.teamOne != null && this.p1Score != null && this.teamTwo != null && this.p2Score != null) {

            const form = Editor.getOverlayForm(
              this.teamOne,
              Editor.getFormattedScore(this.p1Score),
              this.teamTwo,
              Editor.getFormattedScore(this.p2Score),
              this.bracketType,
              this.eventRound,
              this.bestOf,
            );

            this.socket.emit("overlay-update", {content: form, to: this.overlayRoom}, (response) => {
              console.log(response)
            })

            // TODO: Find a way to persist data without introducing bugs. A get recent button? This should happen with user knowledge.

            this.clearOverlayForm()

          } else {
            // TODO: Throw error?
          }
        } catch (e) {
          console.log(e)
        }
      },
      clearOverlayForm() {
        this.teamOne = { name: "" }
        this.teamTwo = { name: "" }
        this.p1Score = { name: "-", value: "" }
        this.p2Score = { name: "-", value: "" }

        this.bracketType = ""
        this.eventRound = ""
        this.bestOf = "Best of 3"

        this.setSelection = {}
      },
      clearScoreForm() {
        this.p1ScoreIncrement = { name: "-", value: "" }
        this.p2ScoreIncrement = { name: "-", value: "" }
      },
      submitScoreForm() {

        try {
          const form = { p1Score: '', p2Score: '' }
          form.p1Score = this.p1ScoreIncrement.value
          form.p2Score = this.p2ScoreIncrement.value

          this.socket.emit("score-update", {
            content: form,
            to: this.overlayRoom,
          })

        } catch(e) {
          console.log(e)
        }

      },
      reverseTeams() {
        const tempTeam = this.teamOne

        this.teamOne = this.teamTwo
        this.teamTwo = tempTeam
      },
      getModuleURL(type,polling) {

        if(polling == 'true') {

          const slug = this.tournamentSelection.slug == null ? '' : this.tournamentSelection.slug
          return this.host +this.port+ "/" + this.overlayModule
            + "?type=" + type
            + "&id=" + this.overlayRoom
            + "&poll=" + polling
            + "&winnerBestOfStart=" + this.selectedWinnerBestOfStart
            + "&loserBestOfStart=" + this.selectedLoserBestOfStart
            + "&slug=" + slug

        } else {

          return this.host +this.port+ "/" + this.overlayModule
          + "?type=" + type
          + "&id=" + this.overlayRoom

        }

      },
    },
    computed: {
      getTeamOneName() {
        return Editor.getFormattedName(this.teamOne)
      },
      getTeamTwoName() {
        return Editor.getFormattedName(this.teamTwo)
      },
      getPlayer1Score() {
        return Editor.getFormattedScore(this.p1Score)
      },
      getPlayer2Score() {
        return Editor.getFormattedScore(this.p2Score)
      }
    },
    components: {
      "p-datatable": primevue.datatable,
      "p-column": primevue.column,
      "p-dropdown": primevue.dropdown,
      "p-button": primevue.button,
      "p-autocomplete": primevue.autocomplete,
      "p-selectbutton": primevue.selectbutton,
      "p-radiobutton": primevue.radiobutton,
      "p-checkbox": primevue.checkbox,
      "p-inputtext": primevue.inputtext,
      "p-togglebutton": primevue.togglebutton,
    },
  }).use(primevue.config.default).mount('#app')

</script>

</html>
