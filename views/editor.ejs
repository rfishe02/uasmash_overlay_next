<html>

<head>
  <title>UA Smash Overlay Editor</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <link rel="stylesheet" href="/stylesheets/editor.css">

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="https://unpkg.com/primevue/core/core.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/selectbutton/selectbutton.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/textarea/textarea.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>

</head>

<body>
  <div id="app">

    <nav-bar :icon-url="navLogoUrl" :links="navLinks"></nav-bar>

    <div class="container" style="padding-bottom: 25px; padding-top: 15px">

      <div class="row justify-content-around">

        <div class="col-12 col-lg-5">
          <div class="row mb-2">
            <p-textarea v-model="playerEntry" :auto-resize="false" style="height: 250px;"></p-textarea>
          </div>
          <div class="row mb-2">
            <p-button
              label="Save Players"
              class="p-button-outlined"
              @click="loadPlayerList"
              style="width: 150px;"
            ></p-button>
            <p-button
              label="Clear List"
              class="p-button-text"
              @click="clearPlayerList"
              style="width: 150px; margin-right: 7px;"
            ></p-button>
          </div>
        </div>

        <div class="col-12 col-lg-6">

          <div class="row mb-2">
            <div class="col border rounded" style="background-color: white;">
              <form id="overlay-edit">
                <div class="row" style="margin-bottom: 25px;">
                  <h5>Player & Banner Update</h5>
                </div>
    
                <div class="row mb-2">
                  <div class="col" >
                    <span class="p-float-label">
                      <p-autocomplete
                        v-model="teamOne"
                        :suggestions="filteredPlayers"
                        @complete="filterPlayers($event)"
                        :dropdown="false"
                      ></p-autocomplete>
                      <label for="autocomplete">Left Team</label>
                    </span>
                  </div>
    
                  <div class="col">
                    <span class="p-float-label">
                      <p-autocomplete
                        v-model="teamTwo"
                        :suggestions="filteredPlayers"
                        @complete="filterPlayers($event)"
                        :dropdown="false"
                      ></p-autocomplete>
                      <label for="autocomplete">Right Team</label>
                    </span>
                  </div>
                </div>
    
                <div class="row mb-3">
                  <div class="col mb-2">
                    <p-selectbutton
                      v-model="p1Score"
                      :options="scoreOptions"
                      option-label="name"
                      :unselectable="false"
                    ></p-selectbutton>
                  </div>
    
                  <div class="col">
                    <p-selectbutton
                      v-model="p2Score"
                      :options="scoreOptions"
                      option-label="name"
                      :unselectable="false"
                    ></p-selectbutton>
                  </div>
                </div>
    
                <div class="row mb-3">
                  <h5>Event Banner</h5>
                </div>
    
                <div class="row mb-2">
                  <div class="col-6 col-md-4 mb-2">
                    <p-autocomplete
                      v-model="bracketType"
                      :suggestions="filteredBrackets"
                      @complete="filterBrackets($event)"
                      :dropdown="false"
                      placeholder="Bracket Type"
                    ></p-autocomplete>
                  </div>
                  <div class="col-6 col-md-4 mb-2">
                    <p-autocomplete
                      v-model="eventRound"
                      :suggestions="filteredRounds"
                      @complete="filterRounds($event)"
                      :dropdown="false"
                      placeholder="Round"
                    ></p-autocomplete>
                  </div>
    
                  <div class="col-6 col-md-4 mb-2">
                    <!--<p-selectbutton :unselectable="false" v-model="bestOf" :options="matchList" aria-labelledby=""></p-selectbutton>-->
                    <p-dropdown
                      class="w-100"
                      v-model="bestOf"
                      :options="matchList"
                      placeholder="Best of"
                      :editable="true"
                    ></p-dropdown>
                  </div>
    
                </div>
    
                <div class="row justify-content-between pt-3">
                  <div class="col-8">
                    <p-button
                      label="Publish"
                      class="p-button-outlined"
                      style="width: 125px; margin-right: 10px"
                      @click="submitOverlayForm"
                    ></p-button>
                    <p-button
                      label="Clear"
                      class="p-button-text"
                      style="width: 125px"
                      @click="clearOverlayForm"
                    ></p-button>
                  </div>
                </div>
              </form>
            </div>
          </div>

          <div class="row mb-2">
            <div class="col border rounded" style="background-color: white;">
              <form>
                <div class="row mb-3">
                  <h5>Score Update</h5>
                </div>
    
                <div class = "row mb-3">
                  <div class="col">
                    
                    <!--<p-selectbutton v-model="p1ScoreIncrement" :unselectable="false" option-label="name" :options="scoreOptions" aria-labelledby=""></p-selectbutton>-->
                    <p-inputtext type="number" v-model="p1ScoreIncrement" style="width: 50px;"></p-inputtext>

                  </div>
                  <div class="col">

                    <!--<p-selectbutton v-model="p2ScoreIncrement" :unselectable="false" option-label="name" :options="scoreOptions" aria-labelledby=""></p-selectbutton>-->
                    <p-inputtext type="number" v-model="p2ScoreIncrement" style="width: 50px;"></p-inputtext>

                  </div>
                </div>
    
                <div class="row pt-3">
                  <div class="col">
                    <p-button
                      label="Update"
                      class="p-button-outlined"
                      style="width: 125px; margin-right: 10px"
                      @click="submitScoreForm"
                    ></p-button>
                    <p-button
                      label="Reset"
                      class="p-button-text"
                      style="width: 125px"
                      @click="clearScoreForm"
                    ></p-button>
                  </div>
                </div>
              </form>
            </div>
          </div>

        </div>

      </div>

      <!-- TODO: Rebuild preview header -->

    </div>

  </div>
</body>

<script type="module">
  import NavBar from '/javascripts/NavBar.js'
  import OverlayDataManager from '/javascripts/OverlayDataManager.js'
  import Editor from '/javascripts/Editor.mjs'

  const { createApp} = Vue
  const { FilterMatchMode, FilterOperator } = primevue.api;

  const socket = io("http://" + window.location.hostname + ":3000", {
    reconnectionDelayMax: 10000,
    autoConnect: false,
  })

  socket.on("connect_error", (err) => {
    console.log("connect error")
  })

  socket.on("connect", () => {

  })

  socket.on("disconnect", () => {
    socket.connect();
  })

  socket.on("close", (reason) => {

  })

  addEventListener('pagehide', (event) => {
    socket.disconnect()
  })

  addEventListener('pageshow', (event) => {
    if(event.persisted) {
      socket.connect()

      /*

      OverlayDataManager.importKeyOrGenerate(editorApp.host+editorApp.port,<%= user.id %>,"players","Player Overlay").then((data) => {
        if(data.key_value.length > 0) {
          await socket.emit("unsubscribe",editorApp.playerRoom)

          editorApp.playerRoom = data.key_value
          socket.emit("subscribe",editorApp.playerRoom)
        }
      })

      */

    }
  })

  const editorApp = createApp({
    data() {
      return {
        host: 'http://' + window.location.hostname,
        port: ":3000",
        navLogoUrl: '/fsmsmashlogo.png',
        navLinks:[],
        playerEntry: '',
        playerList: [],
        filteredPlayers: [],
        filteredBrackets: [],
        filteredRounds: [],
        teamOne: '',
        teamTwo: '',
        p1Score: {name: '-', value: ''},
        p2Score: {name: '-', value: ''},
        p1ScoreIncrement: 0,
        p2ScoreIncrement: 0,
        bracketType: "",
        eventRound: "",
        bestOf: "",
        playerRoom: "",
        socket: socket,
        scoreOptions: [
          { name: "-", value: "" },
          { name: "0", value: "0" },
          { name: "1", value: "1" },
          { name: "2", value: "2" },
          { name: "3", value: "3" },
          { name: "4", value: "4" },
        ],
        bracketList: [
          "Friendlies",
          "Pools",
          "Bracket",
          "Top 32",
          "Top 8",
        ],
        roundList: [
          "Round 1",
          "Round 2",
          "Round 3",
          "Round 4",
          "Round 5",
          "Winners Round 1",
          "Winners Round 2",
          "Winners Round 3",
          "Winners Round 4",
          "Winners Round 5",
          "Winners Quarter-Final",
          "Winners Semi-Final",
          "Winners Final",
          "Losers Round 1",
          "Losers Round 2",
          "Losers Round 3",
          "Losers Round 4",
          "Losers Round 5",
          "Losers Quarter-Final",
          "Losers Semi-Final",
          "Losers Final",
          "Grand Final",
          "Grand Final Reset",
        ],
        matchList: [
          "",
          "Best of 3",
          "Best of 5",
        ],
      }
    },
    mounted() {

      // TODO: Consider making this import only.

      OverlayDataManager.importOverlayDataOrGenerate(this.host+this.port,<%= user.id %>,"players","Player Overlay").then((data) => {
        if(data.key_value.length > 0) {
          this.playerRoom = data.key_value
          
          this.socket.connect()
          this.socket.emit("subscribe",data.key_value)
        }
      })

      const playerList = localStorage.getItem('playerList')

      if(playerList != null){
        this.playerList = JSON.parse(playerList)
      }

      const playerEntry = localStorage.getItem('playerEntry')

      if(playerEntry != null) {
        this.playerEntry = playerEntry
      }

    },
    methods: {
      loadPlayerList() {

        const list = this.playerEntry.split(/\r?\n/);
        const players = []

        for(var i = 0; i < list.length; i++){
          players.push(list[i])
        }

        this.playerList = players

        localStorage.setItem('playerEntry',this.playerEntry)
        localStorage.setItem('playerList',JSON.stringify(this.playerList))

      },
      clearPlayerList() {

        this.playerList = []
        this.playerEntry = ''
        localStorage.removeItem('playerEntry')
        localStorage.removeItem('playerEntry')

      },
      filterPlayers(event) {
        const items = this.playerList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (let i = 0; i < items.length; i++) {
            const item = items[i]
            if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {
              _filteredItems.push(item)
            }
          }

          this.filteredPlayers = _filteredItems
        }
      },
      filterBrackets(event) {
        const items = this.bracketList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (let i = 0; i < items.length; i++) {
            const item = items[i]
            if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {
              _filteredItems.push(item)
            }
          }

          this.filteredBrackets = _filteredItems
        }
      },
      filterRounds(event) {
        const items = this.roundList

        if (items != null) {
          const query = event.query
          const _filteredItems = []

          for (let i = 0; i < items.length; i++) {
            const item = items[i]
            if (item.toLowerCase().indexOf(query.toLowerCase()) >= 0) {
              _filteredItems.push(item)
            }
          }

          this.filteredRounds = _filteredItems
        }
      },
      async submitOverlayForm() {
        try {
          if (this.teamOne != null && this.p1Score != null && this.teamTwo != null && this.p2Score != null) {

            const form = Editor.getOverlayForm(
              this.teamOne,
              Editor.getFormattedScore(this.p1Score),
              this.teamTwo,
              Editor.getFormattedScore(this.p2Score),
              this.bracketType,
              this.eventRound,
              this.bestOf,
            );

            this.socket.emit("overlay-update", {content: form, to: this.playerRoom}, (response) => {
              console.log(response)
            })

            // TODO: Find a way to persist data without introducing bugs. A get recent button? This should happen with user knowledge.

            this.p1ScoreIncrement = this.p1Score.value
            this.p2ScoreIncrement = this.p2Score.value

            this.clearOverlayForm()

          } else {
            // TODO: Throw error?
          }
        } catch (e) {
          console.log(e)
        }
      },
      clearOverlayForm() {
        this.teamOne = ''
        this.teamTwo = ''
        this.p1Score = { name: "-", value: "" }
        this.p2Score = { name: "-", value: "" }

        this.bracketType = ""
        this.eventRound = ""
        this.bestOf = ""
      },
      clearScoreForm() {
        this.p1ScoreIncrement = 0
        this.p2ScoreIncrement = 0
      },
      submitScoreForm() {

        try {
          const form = { p1Score: '', p2Score: '' }
          form.p1Score = this.p1ScoreIncrement
          form.p2Score = this.p2ScoreIncrement

          this.socket.emit("score-update", {
            content: form,
            to: this.playerRoom,
          })

        } catch(e) {
          console.log(e)
        }

      },
    },
    computed: {
      getTeamOneName() {
        return Editor.getFormattedName(this.teamOne)
      },
      getTeamTwoName() {
        return Editor.getFormattedName(this.teamTwo)
      },
      getPlayer1Score() {
        return Editor.getFormattedScore(this.p1Score)
      },
      getPlayer2Score() {
        return Editor.getFormattedScore(this.p2Score)
      }
    },
    components: {
      "p-dropdown": primevue.dropdown,
      "p-button": primevue.button,
      "p-autocomplete": primevue.autocomplete,
      "p-selectbutton": primevue.selectbutton,
      "p-inputtext": primevue.inputtext,
      "p-textarea": primevue.textarea,
      NavBar
    },
  }).use(primevue.config.default).mount('#app')

</script>

</html>
