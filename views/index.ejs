<html>

<head>
  <title>UA Smash Overlay</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <!--
  <link rel="stylesheet" href="/stylesheets/style.css">-->

  <style>
    .list-move,
    .list-enter-active,
    .list-leave-active {
      transition: all 0.3s ease;
    }

    .list-enter-from {
      opacity: 0;
      transform: translateX(300px);
    }

    .list-leave-to {
      opacity: 0;
      transform: translateX(-300px);
    }

    .list-leave-active {
      position: absolute;
    }
  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

    <div class="container">
      <div class="row justify-content-center" style="padding-top: 125px;">

        <transition-group name="list">

          <div class="col-6" v-if="!showSignUpForm">
            <form>
              <h4>Log In</h4>
              <br>

              <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Username</label>
                <input v-model="username" type="text" class="form-control" id="exampleFormControlInput1" placeholder="">
              </div>

              <div class="mb-3">
                <label for="exampleFormControlInput2" class="form-label">Password</label>
                <input v-model="password" type="password" class="form-control" id="exampleFormControlInput2" placeholder="">
              </div>

              <button type="submit" class="btn btn-primary" @click.prevent="submitLogInForm">Log In</button>
              <button type="button" class="btn btn-link" @click="toggleSignUpForm">Sign Up</button>

            </form>
          </div>

          <div class="col-6" v-if="showSignUpForm">
            <form>
              <h4>Sign Up</h4>
              <br>

              <div class="mb-3">
                <label for="exampleFormControlInput3" class="form-label">Username</label>
                <input v-model="username" type="text" class="form-control" id="exampleFormControlInput3" placeholder="">
              </div>

              <div class="mb-3">
                <label for="exampleFormControlInput5" class="form-label">Password</label>
                <input v-model="password" type="password" class="form-control" id="exampleFormControlInput5" placeholder="">
              </div>

              <button type="submit" class="btn btn-primary" @click.prevent="submitSignUpForm">Sign Up</button>
              <button type="button" class="btn btn-link" @click="toggleSignUpForm">Log In</button>

            </form>
          </div>

        </transition-group>

      </div>
    </div>

  </div>
</body>

<script>
  const { createApp } = Vue

  createApp({
    data() {
      return {
        username: "",
        password: "",
        showSignUpForm: false,
        host: window.location.hostname,
        port: ":3000"
      }
    },
    methods: {
      toggleSignUpForm() {
        this.showSignUpForm = !this.showSignUpForm
      },
      async submitLogInForm() {
        if(this.username != null && this.password != null) {
          if(this.username.length > 0  && this.password.length > 0) {

            const data = { "username": this.username, "password": this.password };
            const path = 'http://' + this.host + this.port

            console.log(path)

            try {

              const response = await fetch(path + '/users/login', {
                method: "post",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded",
                },
                body: new URLSearchParams(data),
              });

              if(response.status == 200) {
                // TODO: Error checking

                window.location.href = path + '/editor'
              }

            } catch (e) {
              console.log(e)
            }

          } else {
            alert("Username and password cannot be blank.")
          }
        }
      },
      async submitSignUpForm() {
        if(this.username != null && this.password != null) {
          if(this.username.length > 0  && this.password.length > 0) {

            const data = { "username": this.username, "password": this.password };
            const path = 'http://' + this.host + this.port

            try {
              const response = await fetch(path + '/users/signup', {
                method: "post",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded",
                },
                body: new URLSearchParams(data),
              });

              if(response.status == 200) {
                // TODO: Error checking

                window.location.href = path + '/editor'
              }

            } catch (e) {

              console.log(e)
            }

          } else {
            alert("Username and password cannot be blank.")
          }
        }
      }
    }
  }).mount('#app')

</script>

</html>
