<html>

<head>
  <title>UA Smash Overlay</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <link href="https://unpkg.com/primevue@^3/resources/themes/saga-blue/theme.css" rel="stylesheet">
  <link href="https://unpkg.com/primevue/resources/primevue.min.css" rel="stylesheet">
  <link href="https://unpkg.com/primeicons/primeicons.css" rel="stylesheet">

  <!--
  <link rel="stylesheet" href="/stylesheets/style.css">-->

  <style>
    .p-inputtext {
      width: 100%;
    }

    .p-dropdown-panel {
      overflow: hidden;
    }
  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

  <script src="https://unpkg.com/primevue/core/core.min.js"></script>
  <script src="https://unpkg.com/primevue@^3/radiobutton/radiobutton.min.js"></script>

</head>

<body>
  <div id="app">

    <div class="container" style="margin-top: 50px;">

      <div class="row justify-content-center">

        <div class="col-6" style="padding-left: 50px; padding-right: 50px;">

          <div class="row mb-3" style="text-align: center">
            <h4>Browser Source URL Generator</h4>
          </div>

          <div class="row mb-3">
            <div class="col">
              <label>Start.gg API Key</label>
              <div class="p-inputgroup">
                <p-inputtext v-model="apiKey" @change="saveAPIKey"></p-inputtext>
                <!--<p-button label="Save Key" @click="saveAPIKey"></p-button>-->
              </div>
            </div>
          </div>

          <div class="row mb-3" v-if="apiKey.length > 0">
            <div class="col">
              <label>Winners "Best Of 5" Starting Point</label>
              <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                <p-radiobutton :inputId="'winner' + option" name="winnerStart" :value="option" v-model="selectedWinnerBestOfStart"></p-radiobutton>
                <label :for="'winner' + option">&nbsp;<i>{{option}}</i></label>
              </div>
            </div>

            <div class="col">
              <label>Losers "Best Of 5" Starting Point</label>
              <div v-for="option of finalsStartOptions" :key="option" class="field-radiobutton">
                <p-radiobutton :inputId="'loser' + option" name="loserStart" :value="option" v-model="selectedLoserBestOfStart"></p-radiobutton>
                <label :for="'loser' + option">&nbsp;<i>{{option}}</i></label>
              </div>
            </div>
          </div>

          <div class="row mb-3" v-if="apiKey.length > 0">
            <p-dropdown
              v-model="tournamentSelection"
              :options="tournamentList"
              option-label="name"
              placeholder="Select a Tournament"
              @change="getOverlayURLs()"
            ></p-dropdown>
          </div>

          <div class="row">
            <div class="col p-0">
              <template v-for="(item,index) in overlayURLs">
                <label for="'playeroverlay'+index">Player Overlay</label>
                <div id="'playeroverlay'+index" class="p-inputgroup mb-2">
                  <p-inputtext type="text" :value="item"> </p-inputtext>
                </div>
              </template>

              <template v-if="waitingOverlayURL.length > 0">
                <label for="waitingoverlay">Waiting Screen</label>
                <div id="waitingoverlay" class="p-inputgroup mb-2">
                  <p-inputtext type="text" :value="waitingOverlayURL"> </p-inputtext>
                </div>
              </template>

              <template v-if="waitingOverlayURL.length > 0">
                <label for="upcomingoverlay">Upcoming Matches</label>
                <div id="upcomingoverlay" class="p-inputgroup mb-2">
                  <p-inputtext type="text" :value="upcomingOverlayURL"> </p-inputtext>
                </div>
              </template>
            </div>
          </div>

        </div>

        <div class="col-6" style="padding-left: 50px; padding-right: 50px;">
          <div class="row mb-3" style="text-align: center">
            <h4>Application Sign In</h4>
          </div>

          <div class="row">
            <div class="card text-center p-0">
              <div class="card-body">

                <div class="row justify-content-center">
                  <div class="col-10" >
                    <form>
                      <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label">Username</label>
                        <input v-model="username" type="text" class="form-control" id="exampleFormControlInput1" placeholder="">
                      </div>
                      <div class="mb-3">
                        <label for="exampleFormControlInput2" class="form-label">Password</label>
                        <input v-model="password" type="password" class="form-control" id="exampleFormControlInput2" placeholder="">
                      </div>
                      <button style="width: 100px;" type="submit" class="btn btn-primary" @click.prevent="submitLogInForm">
                        Log In
                      </button>
                      <button style="width: 100px;" type="submit" class="btn btn-link" @click.prevent="submitSignUpForm">
                        Sign Up
                      </button>
                    </form>
                  </div>
                </div>

              </div>
            </div>
          </div>

        </div>
      </div>

    </div>

  </div>
</body>

<script type="module">
  import StartGGAPI from '/javascripts/StartGGAPI.js'
  const { createApp } = Vue

  createApp({
    data() {
      return {
        host: 'http://' + window.location.hostname,
        port: ":3000",
        username: "",
        password: "",
        tournamentList: [],
        tournamentSelection: [],
        playerOverlay: "overlay/players",
        waitingOverlay: "overlay/waiting",
        upcomingOverlay: "overlay/upcoming",
        selectedWinnerBestOfStart: 'Quarter-Final',
        selectedLoserBestOfStart: 'Quarter-Final',
        finalsStartOptions : [
          'Round 1',
          'Round 2',
          'Round 3',
          'Round 4',
          'Round 5',
          'Quarter-Final',
          'Semi-Final',
          'Final',
          'Grand Final',
        ],
        overlayTypes: [0],
        overlayURLs: [],
        waitingOverlayURL: '',
        upcomingOverlayURL: '',
        apiKey: '',
      }
    },
    mounted() {

      const key = localStorage.getItem('apiKey')

      if(key != null) {
        this.apiKey = key
        this.loadTournamentList()
      }

    },
    methods: {
      async submitLogInForm() {
        if(this.username != null && this.password != null) {
          if(this.username.length > 0  && this.password.length > 0) {

            const data = {"username": this.username,"password": this.password};
            const path = this.host + this.port

            try {
              const response = await fetch(path + '/users/login', {
                method: "post",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded",
                },
                body: new URLSearchParams(data),
              });

              if(response.status == 200) {
                window.location.href = path + '/dashboard'
              }
            } catch (e) {
              console.log(e)
            }

          } else {
            alert("Username and password cannot be blank.")
          }
        }
      },
      async submitSignUpForm() {
        if(this.username != null && this.password != null) {
          if(this.username.length > 0  && this.password.length > 0) {

            const data = {"username": this.username,"password": this.password};
            const path = this.host + this.port

            try {
              const response = await fetch(path + '/users/signup', {
                method: "post",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded",
                },
                body: new URLSearchParams(data),
              });

              if(response.status == 200) {
                window.location.href = this.host + this.port + '/'
              }

            } catch (e) {
              console.log(e)
            }

          } else {
            alert("Username and password cannot be blank.")
          }
        }
      },
      async loadTournamentList() {
        try {

          const results = await StartGGAPI.queryTournaments(this.apiKey)
          this.tournamentList = results

        } catch (e) {
          console.log(e)
        }
      },
      getOverlayURLs() {
        const slug = this.tournamentSelection.slug == null ? '' : this.tournamentSelection.slug

        this.overlayURLs = []
        for(var i = 0; i < this.overlayTypes.length; i++) {
          const url = this.host + this.port + "/" + this.playerOverlay + "?" + new URLSearchParams({
            "type": this.overlayTypes[i],
            "poll": true,
            "winnerBestOfStart": this.selectedWinnerBestOfStart,
            "loserBestOfStart": this.selectedLoserBestOfStart,
            "slug": slug,
            "startgg_key": this.apiKey,
          })

          this.overlayURLs.push(url)
        }

        this.waitingOverlayURL = this.host + this.port + "/" + this.waitingOverlay + "?" + new URLSearchParams({
          "type": 0,
          "slug": slug,
          "startgg_key": this.apiKey,
        })

        this.upcomingOverlayURL = this.host + this.port + "/" + this.upcomingOverlay + "?" + new URLSearchParams({
          "type": 0,
          "winnerBestOfStart": this.selectedWinnerBestOfStart,
          "loserBestOfStart": this.selectedLoserBestOfStart,
          "slug": slug,
          "startgg_key": this.apiKey,
        })

      },
      saveAPIKey() {
        localStorage.setItem('apiKey',this.apiKey)
        this.loadTournamentList()
      }
    },
    components: {
      "p-inputtext": primevue.inputtext,
      "p-radiobutton": primevue.radiobutton,
      "p-dropdown": primevue.dropdown,
      "p-button": primevue.button,
    }
  }).use(primevue.config.default).mount('#app')

</script>

</html>
