<html>

<head>
  <title>UA Smash Upcoming</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <style>
    body {
      background-color: rgba(0, 0, 0, 0);
      margin: 0px auto;
      overflow: hidden;
    }
  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

      <div class="container-fluid" style="width: 1920px; height: 1080px;">

        <template v-for="(item,index) in setList">
          {{item.teamOne}} vs. {{item.teamTwo}} <br>
        </template>

      </div>

    </div>

  </div>
</body>

<script type="module">

  const { createApp } = Vue

  const upcomingApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        apiKey: '',
        setList: []
      }
    },
    mounted() {
      
      const urlParams = new URLSearchParams(window.location.search)
      const slug = urlParams.get('slug')
      const key = urlParams.get('smashgg_key')
      
      if(key != null){
        this.apiKey = key      
      }

      if(slug != null){
        this.querySets(key,slug)
      }

    },
    methods : {
      async querySets(key,slug) {
        const sets = await this.querySetsSmashGG(key,slug)
        this.setList = sets
      },
      async querySetsSmashGG(key,slug) {
        const setQueryData = []
        const query = `
        query MyQuery($slug: String) {
          tournament(slug:$slug){
            name
            events{
              name
            sets (
              sortType: CALL_ORDER
              filters: {
                hideEmpty: true
                state: [1,2]
              }
            ) {
                nodes {
                  id 
                  state 
                  identifier
                  fullRoundText
                  phaseGroup {
                    phase {
                      name
                    }
                  }
                  slots {
                    prereqId
                    entrant {
                      name
                    }
                  }
                }
              }
            }
          }
        }`

        try {

          const response = await fetch("https://api.start.gg/gql/alpha", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer " + key,
            },
            body: JSON.stringify({
              query,
              variables: { slug: slug },
            }),
          })

          if(response.ok){
            const data = await response.json()

            if(data.data != null){
              if(data.data.tournament != null){

                if(data.data.tournament.events != null){
                  data.data.tournament.events.forEach(event => {
                    
                    if(event.sets != null){
                      if(event.sets.nodes != null) {
                        event.sets.nodes.forEach(set => {
                          const s = {id: '', preReqId1: '', preReqId2: '', fullRoundText: '', phaseName: '', teamOne: '?', teamTwo: '?'}
                          s.id = set.id 
                          s.fullRoundText = set.fullRoundText

                          if(set.phaseGroup != null){
                            if(set.phaseGroup.phase != null){
                              s.phaseName = set.phaseGroup.phase.name
                            }
                          }

                          if(set.slots != null){
                            if(set.slots[0] != null){
                              s.preReqId1 = set.slots[0].prereqId
                              if(set.slots[0].entrant != null) {
                                s.teamOne = set.slots[0].entrant.name
                              }
                            }

                            if(set.slots[1] != null){
                              s.preReqId2 = set.slots[1].prereqId
                              if(set.slots[1].entrant != null) {
                                s.teamTwo = set.slots[1].entrant.name
                              }
                            }
                          }

                          setQueryData.push(s)
                        })
                      }
                    }

                  })
                }

              }
            }
          }

        } catch(e){
          console.log(e)
        }

        console.log(setQueryData)
        return setQueryData
      }
    },
    components: {

    }
  }).mount('#app')

</script>

</html>
