<html>

<head>
  <title>UA Smash Upcoming</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <style>
    body {
      background-color: rgba(0, 0, 0, 0);
      margin: 0px auto;
      overflow: hidden;
    }

    .css-selector {
      background: linear-gradient(225deg, #0098ff, #ff2f00);
      background-size: 400% 400%;
      animation: waitingScreenBackground 31s ease infinite;
    }

    @keyframes waitingScreenBackground {
      0%{background-position:0% 51%}
      50%{background-position:100% 50%}
      100%{background-position:0% 51%}
    }

    .list-move, /* apply transition to moving elements */
    .list-enter-active,
    .list-leave-active {
      transition: all 0.5s ease;
    }

    .list-enter-from,
    .list-leave-to {
      opacity: 0;
      transform: translateY(15px);
    }

    /* ensure leaving items are taken out of layout flow so that moving
    animations can be calculated correctly. */
    .list-leave-active {
      position: absolute;
    }

  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

      <div v-if="type == 0" class="container-fluid" style="width: 1920px; height: 1080px;">

        <div class="row justify-content-left row-cols-1" style="padding-top: 80px;">
          
          <transition-group name="list">
            <template v-for="(item,index) in setList" :key="item">
              <div class="col mb-2" v-if="item.state == 1">
                <div class="card shadow" style="width: 17rem; background-color: rgba(255, 255, 255, 1);">
                  <div class="card-body p-2">
                    <h5 class="card-title">{{item.teamOne}} vs. {{item.teamTwo}}</h5>
                    <h6 class="card-subtitle mb-1 text-muted">{{item.eventName}}: {{item.fullRoundText}}</h6>
  
                    <p class="card-text m-0" v-if="item.teamOne == '?' || item.teamTwo == '?'">
                      Waiting On:
                    </p>
                    
                    <ul class="list-group list-group-flush p-0" v-if="item.teamOne == '?' || item.teamTwo == '?'">
                      <li class="list-group-item pt-0 pb-0" v-if="item.teamOne == '?' && getPreReqMatch(item.preReqId1).length > 0">{{getPreReqMatch(item.preReqId1)}}</li>
                      <li class="list-group-item pt-0 pb-0" v-if="item.teamTwo == '?' && getPreReqMatch(item.preReqId2).length > 0">{{getPreReqMatch(item.preReqId2)}}</li>
                    </ul>
  
                  </div>
                </div>
              </div>
            </template>
          </transition-group>

        </div>

      </div>

      <div v-if="type == 1" class="container-fluid css-selector" style="width: 1920px; height: 1080px;">

        <div class="row" style="padding-top: 25px; padding-left: 25px; color: white;">
          <h1>UPCOMING MATCHES</h1>
        </div>

        <div class="row justify-content-center row-cols-6" style="padding-top: 25px; padding-left: 50px; padding-right: 50px;">
          
          <transition-group name="list">
            <template v-for="(item,index) in setList" :key="item">
              <div class="col mb-3">
                <div class="card border-secondary shadow" style="background-color: rgba(255, 255, 255, 1);">
                  <div class="card-body p-3">
                    <h5 class="card-title">{{item.teamOne}} vs. {{item.teamTwo}}</h5>
                    <!--<h6 class="card-subtitle mb-1 text-muted"></h6>-->
  
                    <p class="card-text m-0" v-if="item.teamOne == '?' || item.teamTwo == '?'">
                      Waiting On:
                    </p>
                    
                    <ul class="list-group list-group-flush p-0" v-if="item.teamOne == '?' || item.teamTwo == '?'">
                      <li class="list-group-item pt-0 pb-0" v-if="item.teamOne == '?' && getPreReqMatch(item.preReqId1).length > 0">{{getPreReqMatch(item.preReqId1)}}</li>
                      <li class="list-group-item pt-0 pb-0" v-if="item.teamTwo == '?' && getPreReqMatch(item.preReqId2).length > 0">{{getPreReqMatch(item.preReqId2)}}</li>
                    </ul>
  
                  </div>
                  <div class="card-footer">
                    {{item.eventName}}: {{item.fullRoundText}}
                  </div>
                </div>
              </div>
            </template>
          </transition-group>

        </div>

      </div>

    </div>

  </div>
</body>

<script type="module">
  import StartGGAPI from '/javascripts/StartGGAPI.js'
  import QueueManager from '/javascripts/QueueManager.js'
  const { createApp } = Vue

  const upcomingApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        apiKey: '',
        setList: [],
        preReqList: {},
        winnerBestOfStart: 5,
        loserBestOfStart: 5,
        finalsOrder : {
          'Round 1':0,
          'Round 2':1,
          'Round 3':2,
          'Round 4':3,
          'Round 5':4,
          'Quarter-Final':5,
          'Semi-Final':6,
          'Final':7,
          'Grand Final': 8
        },
        type: 1,
      }
    },
    mounted() {
      
      const urlParams = new URLSearchParams(window.location.search)
      
      const slug = urlParams.get('slug')
      const key = urlParams.get('startgg_key')
      const type = urlParams.get('type')
      const winnerBestOfStart = urlParams.get('winnerBestOfStart') == null ? 5 : this.finalsOrder[urlParams.get('winnerBestOfStart')]
      const loserBestOfStart = urlParams.get('loserBestOfStart') == null ? 5 : this.finalsOrder[urlParams.get('loserBestOfStart')]

      if(type != null){
        this.type = type
      }

      if(winnerBestOfStart != null) {
        this.winnerBestOfStart = winnerBestOfStart
      }
      if(loserBestOfStart != null) {
        this.loserBestOfStart = loserBestOfStart
      }

      if(key != null){
        this.apiKey = key      
      }
      if(slug != null){
        this.querySets(key,slug)
        setInterval(function() { upcomingApp.querySets(key,slug) }, 10000)
      }

    },
    methods : {
      async querySets(key,slug) {

        const sets = await StartGGAPI.queryUpcomingMatches(key,slug)

        sets.forEach(item => {
          this.preReqList[item.id] = item

          const order = this.finalsOrder[item.fullRoundText.replace(/Winners |Losers /g,'')]              
          if(order != null) {
            if(item.fullRoundText.indexOf('Winner') >= 0) {
              if(order >= this.winnerBestOfStart) {
                item.bestOf = 'Best of 5'
              }
            } else {
              if(order >= this.loserBestOfStart) {
                item.bestOf = 'Best of 5'
              }
            }
          }
        })

        QueueManager.refreshQueue(this.setList,sets)

      },
      getPreReqMatch(id) { 
        if(this.preReqList[id] != null) {
          return this.preReqList[id].teamOne + " vs. " + this.preReqList[id].teamTwo
        } else {
          return ''
        }
      }
    },
    components: {

    }
  }).mount('#app')

</script>

</html>
