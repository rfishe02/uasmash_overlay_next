<html>

<head>
  <title>UA Smash Waiting Screen</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <style>

    .css-selector {
      background: linear-gradient(225deg, #0098ff, #ff2f00);
      background-size: 400% 400%;

      animation: waitingScreenBackground 31s ease infinite;
    }

    @keyframes waitingScreenBackground {
      0%{background-position:0% 51%}
      50%{background-position:100% 50%}
      100%{background-position:0% 51%}
    }


    .standings-list {
      max-width: 480px;
      min-width: 480px;
    }

    .social-media-list-item {
      background-color: rgba(0,0,0,0);
      color: white;
      border-color: rgba(0,0,0,0);
    }


    .fade-out {
      animation-duration: 1s;
      animation-name: fadeOut;
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
      }
      to {
        opacity: 0;
      }
    }

    .fade-in {
      animation-duration: 1s;
      animation-name: fadeIn;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

      <div class="container-fluid css-selector" style="width: 1920px; height: 1080px;">

          <div class="row bg-dark text-light mb-3 justify-content-between border-bottom border-secondary">
            <div class="col">
              <h1>{{tournamentName}}</h1>
            </div>
            <div class="col" style="text-align: right">
              <h1>Fort Smith Smash</h1>
            </div>
          </div>

          <div class="row justify-content-between">

              <div class="col standings-list">

                <div v-if="selectedEvent.standings.length > 0" class="card border-light mb-3 standings-list" :class="{'fade-out': fadeOutAnimationEnabled, 'fade-in': fadeInAnimationEnabled}">
                  <div class="card-header bg-dark text-light">Standings</div>
                  <div class="card-body">
                    <h5 class="card-title">{{selectedEvent.name}}</h5>
                    <transition><p class="card-text text-secondary">{{selectedEvent.state}}</p></transition>
                  </div>

                  <ul class="list-group list-group-flush">
                    <li class="list-group-item" style="background-color: rgba(0,0,0,0); border-color: rgba(0,0,0,0);" v-for="(standing, index) in selectedEvent.standings" :key="standing.name">
                      <span class="badge bg-light rounded me-3 text-dark" style="font-size: 12pt;">{{standing.placement}}</span> {{standing.name}}
                    </li>
                  </ul>
                </div>

              </div>

              <div class="col-3">

              </div>

              <div class="col-3">

              </div>

          </div>

          <div class="row bg-dark text-light fixed-bottom border-top border-secondary">
            <div class="col" style="padding-top: 5px; padding-left: 25px;">
              <h3 class="m-0">CONNECT WITH US!</h3>
              <ul class="list-group list-group-horizontal">
                <li class="list-group-item social-media-list-item"><i class="bi bi-facebook"></i> facebook.com/fsmsmash </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-discord"></i> bit.ly/fsmsmash </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitch"></i> twitch.tv/uafscs </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitter"></i> twitter.com/fsmsmash </li>
              </ul>
            </div>
          </div>

      </div>

  </div>
</body>

<script type="module">
  const { createApp} = Vue

  const waitingApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        slug: '',
        tournamentName: '',
        eventList: [],
        selectedEvent: { name: '', state: '', standings: [] },
        selectedEventIndex: 0,
        fadeOutAnimationEnabled: false,
        fadeInAnimationEnabled: false,
      }
    },
    mounted() {
      const urlParams = new URLSearchParams(window.location.search)
      const slug = urlParams.get('slug')

      if(slug != null) {
        this.slug = slug
        this.loadStandingsData(this.slug)
      }

      setInterval(function () {
        waitingApp.selectedEventIndex++;
        if(waitingApp.selectedEventIndex >= waitingApp.eventList.length){
          waitingApp.selectedEventIndex = 0
        }

        waitingApp.reloadEventData()

      }, 15000);

    },
    methods : {
      async queryTournamentEventsSmashGG(key,slug){
        const queryData = { tournamentName: '', tournamentStandings: [] }

        try {
          const query = `
          query TournamentQuery($slug: String) {
            tournament(slug: $slug){
              id
              name
              events {
                id
                name
                state
                sets(
                	filters: {
                    state: [1,2]
                    hideEmpty: true
                  }
                  sortType:CALL_ORDER
                ) {
                  nodes{
                    state
                    slots {
                      entrant {
                        id
                        name
                      }
                    }
                  }
                }
                standings(
                  query: {
                    perPage: 10
                	}
              	){
              			nodes {
                			placement
                			entrant {
                  			id
                  			name
                			}
              			}
            			}
          		}
          	}
          }`

          const response = await fetch("https://api.start.gg/gql/alpha", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer " + key,
            },
            body: JSON.stringify({
              query,
              variables: { slug: slug },
            }),
          })

          if(response.ok) {
            const data = await response.json()

            if (data.data != null) {
              if (data.data.tournament != null) {
                queryData.tournamentName = data.data.tournament.name

                if(data.data.tournament.events != null) {
                  data.data.tournament.events.forEach((e) => {

                    const eventData = {}
                    eventData.name = e.name
                    eventData.state = e.state
                    eventData.standings = []

                    if(e.standings != null){
                      if(e.standings.nodes != null){
                        e.standings.nodes.forEach((standing) => {
                          if(standing.entrant != null) {
                            const entrant = {}
                            entrant.name = standing.entrant.name.slice(standing.entrant.name.indexOf("| ") + 1,standing.entrant.name.length).trim()
                            entrant.placement = standing.placement
                            eventData.standings.push(entrant)
                          }
                        })
                      }
                    }

                    if(eventData.standings.length > 0) {
                      queryData.tournamentStandings.push(eventData)
                    }

                    if(e.sets != null) {
                      if(e.sets.nodes != null) {
                        e.sets.nodes.forEach((set) => {

                          console.log(set)

                        })
                      }
                    }

                  })
                }

              }
            }

          }

        } catch(e) {
            console.log(e)
        }

        return queryData
      },
      async loadStandingsData(slug) {
        const key = '<%= apiKey %>'
        const data = await this.queryTournamentEventsSmashGG(key,slug)

        this.tournamentName = data.tournamentName
        this.eventList = data.tournamentStandings

        this.reloadEventData()

        // TODO: Save to session data
      },
      reloadEventData() {
        this.fadeOutAnimationEnabled = true
        setTimeout(() => {
          this.selectedEvent = this.eventList[this.selectedEventIndex]
          this.fadeOutAnimationEnabled = false

          this.fadeInAnimationEnabled = true
          setTimeout(() => {
            this.fadeInAnimationEnabled = false
          }, 1000)

        }, 1000)
      }
    },
    components: {

    }
  }).mount('#app')

</script>

</html>
