<html>

<head>
  <title>UA Smash Waiting Screen</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <style>

    /* we will explain what these classes do next! */
    .v-enter-active,
    .v-leave-active {
      transition: opacity 1s ease;
    }

    .v-enter-from,
    .v-leave-to {
      opacity: 0;
    }

    .css-selector {
      background: linear-gradient(225deg, #0098ff, #ff2f00);
      background-size: 400% 400%;

      animation: waitingScreenBackground 31s ease infinite;
    }

    @keyframes waitingScreenBackground {
      0%{background-position:0% 51%}
      50%{background-position:100% 50%}
      100%{background-position:0% 51%}
    }


    .social-media-list-item {
      background-color: rgba(0,0,0,0);
      color: white;
      border-color: rgba(0,0,0,0);
    }


    .fade-out {
      animation-duration: 1s;
      animation-name: fadeOut;
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
      }
      to {
        opacity: 0;
      }
    }

    .fade-in {
      animation-duration: 1s;
      animation-name: fadeIn;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

      <div class="container-fluid css-selector" style="width: 1920px; height: 1080px;">

          <div class="row bg-dark text-light justify-content-between border-bottom border-secondary mb-3" style="padding-top: 15px; padding-bottom: 15px; padding-left: 10px; padding-right: 10px;">
            <div class="col">
              <h2 class="m-0 pt-2">{{tournamentName}}</h2>
            </div>
            <div class="col" style="text-align: right">
              <img src="/fsmsmashlogo.png" style="height: 50px;"/>
            </div>
          </div>

          <div class="row" style="padding-left: 50px; padding-top: 25px;">
            <h1 class="text-light">We'll Be Right Back...</h1>
          </div>

          <div class="row" style="padding-left: 50px; padding-right: 50px; padding-top: 25px;">

              <div class="col-3" v-if="selectedEvent.standings.length > 0">
                <h3 class="text-light mb-3">Standings</h3>

                <div class="card bg-dark border-secondary" :class="{'fade-out': fadeOutAnimationEnabled, 'fade-in': fadeInAnimationEnabled}">
                  <!--<div class="card-header bg-dark text-light">{{selectedEvent.name}}</div>-->
                  <div class="card-body">
                    <h5 class="card-title text-light">{{selectedEvent.name}}</h5>
                    <p class="card-text text-light" style="font-style: italic;">{{selectedEvent.state}}</p>
                  </div>

                  <ul class="list-group list-group-flush">
                    <li class="list-group-item" style="background-color: rgba(255,255,255,1); border-color: rgba(0,0,0,0);" v-for="(standing, index) in selectedEvent.standings" :key="standing.name">
                      <span class="badge bg-light text-dark me-3" style="font-size: 12pt;">{{standing.placement}}</span> {{standing.name}}
                    </li>
                  </ul>
                </div>
              </div>

              <transition>
                <div class="col-3" v-if="matchList.length > 0">
                  <h3 class="text-light mb-3">Recent Matches</h3>

                  <template v-for="(event, index) in matchList" :key="event">
                    <template v-for="(match, index) in event.matches" :key="match">

                      <div v-if="match.score != 'DQ'" class="card border-secondary mb-3">
                        <!--<div class="card-header bg-dark text-light"></div>-->
                        <div class="card-body">
                          <h5 class="card-title">{{match.score}}</h5>
                          <p class="card-text text-secondary"><b>{{event.eventName}} {{match.phaseName}}</b> <br> {{match.fullRoundText}}</p>
                        </div>
                        <div class="card-footer">
                          <small class="text-muted">{{match.stopTime}}</small>
                        </div>
                      </div>

                    </template>
                  </template>
                </div>
              </transition>

              <transition>
                <div class="col-3" v-if="streamQueue.length > 0">
                  <h3 class="text-light mb-3">Upcoming Matches</h3>
                  <template v-for="(set, index) in streamQueue" :key="set">
                    <div class="card mb-2">
                      <div class="card-body">
                        <h5 class="card-title">{{set.teamOne}} vs. {{set.teamTwo}}</h5>
                        <p class="card-text text-secondary"><b>{{set.eventName}} {{set.phaseName}}</b> <br> {{set.fullRoundText}}</p>
                      </div>
                    </div>
                  </template>
                </div>
              </transition>

          </div>

          <div class="row bg-dark text-light fixed-bottom border-top border-secondary" style="padding-top: 15px; padding-bottom: 15px; padding-left: 25px; padding-right: 25px;">
            <div class="col">
              <h4 class="mb-0">CONNECT WITH US!</h4>
              <ul class="list-group list-group-horizontal">
                <li class="list-group-item social-media-list-item"><i class="bi bi-facebook"></i> facebook.com/fsmsmash </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-discord"></i> bit.ly/fsmsmash </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitch"></i> twitch.tv/uafscs </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitter"></i> twitter.com/fsmsmash </li>
              </ul>
            </div>
            <div class="col" style="text-align: right;">
              <h4 class="mb-1">LOCAL TIME</h4>
              <h4>{{getCurrentTimeAsString}}</h4>
            </div>
          </div>

      </div>

  </div>
</body>

<script type="module">
  const { createApp} = Vue

  const waitingApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        slug: '',
        tournamentName: '',
        eventList: [],
        matchList: [],
        streamQueue: [],
        selectedEvent: { name: '', state: '', standings: [] },
        selectedEventIndex: 0,
        fadeOutAnimationEnabled: false,
        fadeInAnimationEnabled: false,
        currentTime: new Date()
      }
    },
    mounted() {
      const urlParams = new URLSearchParams(window.location.search)
      const slug = urlParams.get('slug')

      if(slug != null) {
        this.slug = slug
        this.loadTournamentData(this.slug)
      }

      setInterval(function () {
        waitingApp.selectedEventIndex++;
        if(waitingApp.selectedEventIndex >= waitingApp.eventList.length){
          waitingApp.selectedEventIndex = 0
        }

        waitingApp.reloadEventData()

      }, 15000)

      setInterval(function() {
        waitingApp.currentTime = new Date()
      }, 1000)

    },
    methods : {
      async queryTournamentEventsSmashGG(key,slug){
        const queryData = { tournamentName: '', tournamentStandings: [], tournamentMatches: [], tournamentStreamQueue: [] }
        const updatedAfter = Math.floor(Date.now() / 1000) - 9000

        try {
          const query = `
          query TournamentQuery($slug: String, $updatedAfter:Timestamp) {
            tournament(slug: $slug){
              id
              name
              streamQueue {
                sets {
                  event {
                    name
                    phases {
                      name
                    }
                  }
                  fullRoundText
                 	slots{
                    entrant {
                      id
                      name
                    }
                  }
                }
              }
              events {
                name
                state
                sets(
                  perPage: 8
                	filters: {
                    state: [3]
                    hideEmpty: true
                    updatedAfter:$updatedAfter
                  }
                  sortType: RECENT
                ) {
                  nodes{
                    state
                    event {
                      phases {
                        name
                      }
                    }
                    fullRoundText
                    displayScore
                    completedAt
                    slots {
                      entrant {
                        id
                        name
                      }
                    }
                  }
                }
                standings(
                  query: {
                    perPage: 12
                	}
              	){
              			nodes {
                			placement
                			entrant {
                  			id
                  			name
                			}
              			}
            			}
          		}
          	}
          }`

          const response = await fetch("https://api.start.gg/gql/alpha", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer " + key,
            },
            body: JSON.stringify({
              query,
              variables: { slug: slug, updatedAfter: updatedAfter },
            }),
          })

          if(response.ok) {
            const data = await response.json()

            if (data.data != null) {
              if (data.data.tournament != null) {
                queryData.tournamentName = data.data.tournament.name

                if(data.data.tournament.streamQueue != null) {
                  data.data.tournament.streamQueue.forEach((queue) => {

                    if(queue.sets != null) {
                      queue.sets.forEach((set) => {
                        const queueData = {eventName: '', phaseName: '', fullRoundText: set.fullRoundText, teamOne: '', teamTwo: ''}

                        if(set.event != null){
                          queueData.eventName = set.event.name
                          if(set.event.phases != null) {
                            if(set.event.phases.length > 0){
                              queueData.phaseName = set.event.phases[0].name
                            }
                          }
                        }

                        if(set.slots != null) {
                          if(set.slots.length > 0) {
                            if(set.slots[0].entrant != null) {
                              queueData.teamOne = set.slots[0].entrant.name
                            }
                            if(set.slots[1].entrant != null) {
                              queueData.teamTwo = set.slots[1].entrant.name
                            }
                            queryData.tournamentStreamQueue.push(queueData)
                          }
                        }

                      })
                    }

                  })
                }

                if(data.data.tournament.events != null) {
                  data.data.tournament.events.forEach((e) => {

                    const eventStandings = {name: e.name, state: e.state, phase: '', standings: []}

                    if(e.phases != null) {

                    }

                    if(e.standings != null){
                      if(e.standings.nodes != null){
                        e.standings.nodes.forEach((standing) => {
                          if(standing.entrant != null) {
                            const entrant = {}
                            entrant.name = standing.entrant.name.slice(standing.entrant.name.indexOf("| ") + 1,standing.entrant.name.length).trim()
                            entrant.placement = standing.placement
                            eventStandings.standings.push(entrant)
                          }
                        })
                      }
                    }
                    if(eventStandings.standings.length > 0) {
                      queryData.tournamentStandings.push(eventStandings)
                    }

                    const eventMatches = {eventName: e.name, matches: []}

                    if(e.sets != null) {
                      if(e.sets.nodes != null) {
                        e.sets.nodes.forEach((set) => {
                          const d = new Date(set.completedAt * 1000)
                          const match = {teamOne: '', teamTwo: '', phaseName: '', fullRoundText: '', score: set.displayScore, stopTime: Math.round((new Date() - d) / (1000 * 60)) + " minutes ago"}

                          match.fullRoundText = set.fullRoundText

                          if(set.event != null){
                            if(set.event.phases != null){
                              if(set.event.phases.length > 0) {
                                match.phaseName = set.event.phases[0].name
                              }
                            }
                          }

                          if(set.slots != null) {
                            if(set.slots[0] != null) {
                              if(set.slots[0].entrant != null){
                                match.teamOne = set.slots[0].entrant.name.slice(set.slots[0].entrant.name.indexOf("| ") + 1,set.slots[0].entrant.name.length).trim()
                              }
                            }
                            if(set.slots[1] != null) {
                              if(set.slots[1].entrant != null){
                                match.teamTwo = set.slots[1].entrant.name.slice(set.slots[1].entrant.name.indexOf("| ") + 1,set.slots[1].entrant.name.length).trim()
                              }
                            }
                            if(match.teamOne.length > 0 && match.teamTwo.length > 0) {
                              eventMatches.matches.push(match)
                            }
                          }
                        })
                      }
                    }
                    if(eventMatches.matches.length > 0) {
                      queryData.tournamentMatches.push(eventMatches)
                    }

                  })
                }

              }
            }

          }

        } catch(e) {
            console.log(e)
        }

        console.log(queryData)
        return queryData
      },
      async loadTournamentData(slug) {
        const key = '<%= apiKey %>'
        const data = await this.queryTournamentEventsSmashGG(key,slug)

        this.tournamentName = data.tournamentName
        this.eventList = data.tournamentStandings
        this.matchList = data.tournamentMatches
        this.streamQueue = data.tournamentStreamQueue

        this.reloadEventData()

        // TODO: Save to session data
      },
      reloadEventData() {
        if(this.eventList.length > 0) {

          this.fadeOutAnimationEnabled = true
          setTimeout(() => {
            this.selectedEvent = this.eventList[this.selectedEventIndex]
            this.fadeOutAnimationEnabled = false

            this.fadeInAnimationEnabled = true
            setTimeout(() => {
              this.fadeInAnimationEnabled = false
            }, 1000)

          }, 1000)

        }
      }
    },
    computed: {
      getCurrentTimeAsString() {
        const dateString =
        this.currentTime.getHours().toString().padStart(2, '0') + ":" +
        this.currentTime.getMinutes().toString().padStart(2, '0') + ":" +
        this.currentTime.getSeconds().toString().padStart(2, '0')
        return dateString
      }
    },
    components: {

    }
  }).mount('#app')

</script>

</html>
