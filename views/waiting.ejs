<html>

<head>
  <title>UA Smash Waiting Screen</title>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

  <style>

    .css-selector {
      background: linear-gradient(269deg, #ff4600, #46a2fb, #ffffff);
      background-size: 600% 600%;

      animation: waitingScreenBackground 30s ease infinite;
    }

    @keyframes waitingScreenBackground {
      0%{background-position:92% 0%}
      50%{background-position:9% 100%}
      100%{background-position:92% 0%}
    }


    .list-move, /* apply transition to moving elements */
    .list-enter-active,
    .list-leave-active {
      transition: all 1s ease;
    }

    /* ensure leaving items are taken out of layout flow so that moving
    animations can be calculated correctly. */
    .list-leave-active {
      position: absolute;
    }

    .list-enter-from,
    .list-leave-to {
      opacity: 0;
    }


    .fade-enter-active,
    .fade-leave-active {
      transition: opacity 0.5s ease;
    }

    .fade-enter-from,
    .fade-leave-to {
      opacity: 0;
    }


    .standings-list {
      max-width: 475px;
      min-width: 475px;
    }

    .social-media-list-item {
      background-color: rgba(0,0,0,0);
      color: white;
      border-color: rgba(0,0,0,0);
    }

  </style>

  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>

  <script src="https://unpkg.com/vue@3"></script>

</head>

<body>
  <div id="app">

      <div class="container-fluid css-selector" style="width: 1920px; height: 1080px;">

          <div class="row bg-dark text-light mb-3 justify-content-between border-bottom border-secondary">
            <div class="col">
              <h1>{{tournamentName}}</h1>
            </div>
            <div class="col" style="text-align: right">
              <h1>Fort Smith Smash</h1>
            </div>
          </div>

          <div class="row">

              <div class="col standings-list">
                <transition-group name="list">
                  <template v-for="(event, index) in selectedStandingsList" :key="event">
                    <div class="card border-secondary mb-3 standings-list">
                      <div class="card-header bg-dark text-light">{{event.name}}</div>
                      <div class="card-body">
                        <ul class="list-group list-group-flush" v-for="(standing, index) in event.standings">
                          <li class="list-group-item" style="background-color: rgba(0,0,0,0);">
                            <span class="badge bg-light rounded me-3 text-dark" style="font-size: 12pt;">{{standing.placement}}</span>
                            {{standing.name}}
                          </li>
                        </ul>
                      </div>
                    </div>
                  </template>
                </transition-group>
              </div>

              <div class="col-3">

              </div>

          </div>

          <div class="row bg-dark text-light fixed-bottom border-top border-secondary">
            <div class="col" style="padding-top: 5px; padding-left: 25px;">
              <h3 class="m-0">CONNECT WITH US!</h3>
              <ul class="list-group list-group-horizontal">
                <li class="list-group-item social-media-list-item"><i class="bi bi-facebook"></i> facebook.com/fsmsmash</li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-discord"></i> bit.ly/fsmsmash </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitch"></i> uafscs </li>
                <li class="list-group-item social-media-list-item"><i class="bi bi-twitter"></i> @fsmsmash</li>
              </ul>
            </div>
          </div>

      </div>

  </div>
</body>

<script type="module">
  const { createApp} = Vue

  const waitingApp = createApp({
    data() {
      return {
        host: window.location.hostname,
        port: ":3000",
        slug: '',
        tournamentName: '',
        eventsStandingsList: [],
        selectedStandingsList: [],
        selectedStandingsIndex: 0,
      }
    },
    mounted() {
      const urlParams = new URLSearchParams(window.location.search)
      const slug = urlParams.get('slug')

      if(slug != null) {
        this.slug = slug
        this.loadStandingsData(this.slug)
      }

      setInterval(function () {
        waitingApp.selectedStandingsIndex++;
        if(waitingApp.selectedStandingsIndex >= waitingApp.eventsStandingsList.length){
          waitingApp.selectedStandingsIndex = 0
        }

        waitingApp.selectedStandingsList.pop()
        waitingApp.selectedStandingsList.push(waitingApp.eventsStandingsList[waitingApp.selectedStandingsIndex])

      }, 10000);

    },
    methods : {
      async queryEventStandingsSmashGG(key,slug){
        const standingsQueryData = { tournamentName: '', tournamentStandings: [] }

        try {
          const query = `
          query TournamentQuery($slug: String) {
            tournament(slug: $slug){
              id
              name
              events {
                id
                name
                standings(
                  query: {
                    perPage: 8
      	          }
    	          ){
    			          nodes {
    				          id
      			          placement
      			          entrant {
        			          id
        			          name
      			          }
    			          }
  			          }
		            }
	          }
          }`

          const response = await fetch("https://api.start.gg/gql/alpha", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer " + key,
            },
            body: JSON.stringify({
              query,
              variables: { slug: slug },
            }),
          })

          if(response.ok) {
            const data = await response.json()

            if (data.data != null) {
              if (data.data.tournament != null) {
                standingsQueryData.tournamentName = data.data.tournament.name

                if(data.data.tournament.events != null) {
                  data.data.tournament.events.forEach((e) => {

                    const eventStanding = {}
                    eventStanding.name = e.name
                    eventStanding.standings = []

                    if(e.standings != null){
                      if(e.standings.nodes != null){
                        e.standings.nodes.forEach((standing) => {

                          if(standing.entrant != null) {
                            const entrant = {}
                            entrant.name = standing.entrant.name.slice(standing.entrant.name.indexOf("| ") + 1,standing.entrant.name.length).trim()
                            entrant.placement = standing.placement
                            eventStanding.standings.push(entrant)
                          }

                        })
                      }
                    }

                    if(eventStanding.standings.length > 0) {
                      standingsQueryData.tournamentStandings.push(eventStanding)
                    }
                  })
                }

              }
            }

          }

        } catch(e) {
            console.log(e)
        }

        return standingsQueryData
      },
      async loadStandingsData(slug) {
        const key = '<%= apiKey %>'
        const data = await this.queryEventStandingsSmashGG(key,slug)

        this.tournamentName = data.tournamentName
        this.eventsStandingsList = data.tournamentStandings

        if(this.eventsStandingsList.length > 0){
          this.selectedStandingsList.push(this.eventsStandingsList[0])
        }

        // TODO: Save to session data
      }
    },
    components: {

    }
  }).mount('#app')

</script>

</html>
