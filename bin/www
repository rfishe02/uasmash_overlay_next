#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config()

var app = require('../app');
var debug = require('debug')('uasmash-overlay-next:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * SOCKET IO CODE.
 */

const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
  }
});

io.use((socket, next) => {

  const room = socket.handshake.auth.room;
  if (!room) {
    return next(new Error("invalid room"));
  }

  socket.room = room;
  next();

});

io.on("connection", (socket) => {

   console.log(socket.id+" connected");
   socket.join(socket.room);

   socket.on("overlay-update", ({ content, to }, callback) => {
     socket.to(to).emit("overlay-push", {
       content,
       from: socket.id,
     });

     callback("200");
   });

   socket.on("striker-update", ({ content, to }) => {
    socket.to(to).emit("striker-push", {
      content,
      from: socket.id,
    });
   });

   socket.on("disconnect", (reason) => {
     console.log(socket.id+" disconnected: "+reason);
   });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
